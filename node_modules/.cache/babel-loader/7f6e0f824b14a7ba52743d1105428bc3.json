{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Plugins = void 0;\nconst plugins = [];\nconst interactorsInitializers = new Map();\nconst updatersInitializers = new Map();\nconst interactors = new Map();\nconst updaters = new Map();\nconst presets = new Map();\nconst drawers = new Map();\nconst pathGenerators = new Map();\n\nclass Plugins {\n  static getPlugin(plugin) {\n    return plugins.find(t => t.id === plugin);\n  }\n\n  static addPlugin(plugin) {\n    if (!Plugins.getPlugin(plugin.id)) {\n      plugins.push(plugin);\n    }\n  }\n\n  static getAvailablePlugins(container) {\n    const res = new Map();\n\n    for (const plugin of plugins) {\n      if (!plugin.needsPlugin(container.actualOptions)) {\n        continue;\n      }\n\n      res.set(plugin.id, plugin.getPlugin(container));\n    }\n\n    return res;\n  }\n\n  static loadOptions(options, sourceOptions) {\n    for (const plugin of plugins) {\n      plugin.loadOptions(options, sourceOptions);\n    }\n  }\n\n  static getPreset(preset) {\n    return presets.get(preset);\n  }\n\n  static addPreset(presetKey, options, override = false) {\n    if (override || !Plugins.getPreset(presetKey)) {\n      presets.set(presetKey, options);\n    }\n  }\n\n  static addShapeDrawer(type, drawer) {\n    if (!Plugins.getShapeDrawer(type)) {\n      drawers.set(type, drawer);\n    }\n  }\n\n  static getShapeDrawer(type) {\n    return drawers.get(type);\n  }\n\n  static getSupportedShapes() {\n    return drawers.keys();\n  }\n\n  static getPathGenerator(type) {\n    return pathGenerators.get(type);\n  }\n\n  static addPathGenerator(type, pathGenerator) {\n    if (!Plugins.getPathGenerator(type)) {\n      pathGenerators.set(type, pathGenerator);\n    }\n  }\n\n  static getInteractors(container) {\n    let res = interactors.get(container);\n\n    if (!res) {\n      res = [...interactorsInitializers.values()].map(t => t(container));\n      interactors.set(container, res);\n    }\n\n    return res;\n  }\n\n  static addInteractor(name, initInteractor) {\n    interactorsInitializers.set(name, initInteractor);\n  }\n\n  static getUpdaters(container) {\n    let res = updaters.get(container);\n\n    if (!res) {\n      res = [...updatersInitializers.values()].map(t => t(container));\n      updaters.set(container, res);\n    }\n\n    return res;\n  }\n\n  static addParticleUpdater(name, initUpdater) {\n    updatersInitializers.set(name, initUpdater);\n  }\n\n}\n\nexports.Plugins = Plugins;","map":null,"metadata":{},"sourceType":"script"}