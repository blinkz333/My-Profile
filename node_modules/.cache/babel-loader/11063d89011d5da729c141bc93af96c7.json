{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CircleWarp = void 0;\n\nconst Rectangle_1 = require(\"./Rectangle\");\n\nconst Circle_1 = require(\"./Circle\");\n\nclass CircleWarp extends Circle_1.Circle {\n  constructor(x, y, radius, canvasSize) {\n    super(x, y, radius);\n    this.canvasSize = canvasSize;\n    this.canvasSize = {\n      height: canvasSize.height,\n      width: canvasSize.width\n    };\n  }\n\n  contains(point) {\n    if (super.contains(point)) {\n      return true;\n    }\n\n    const posNE = {\n      x: point.x - this.canvasSize.width,\n      y: point.y\n    };\n\n    if (super.contains(posNE)) {\n      return true;\n    }\n\n    const posSE = {\n      x: point.x - this.canvasSize.width,\n      y: point.y - this.canvasSize.height\n    };\n\n    if (super.contains(posSE)) {\n      return true;\n    }\n\n    const posSW = {\n      x: point.x,\n      y: point.y - this.canvasSize.height\n    };\n    return super.contains(posSW);\n  }\n\n  intersects(range) {\n    if (super.intersects(range)) {\n      return true;\n    }\n\n    const rect = range;\n    const circle = range;\n    const newPos = {\n      x: range.position.x - this.canvasSize.width,\n      y: range.position.y - this.canvasSize.height\n    };\n\n    if (circle.radius !== undefined) {\n      const biggerCircle = new Circle_1.Circle(newPos.x, newPos.y, circle.radius * 2);\n      return super.intersects(biggerCircle);\n    } else if (rect.size !== undefined) {\n      const rectSW = new Rectangle_1.Rectangle(newPos.x, newPos.y, rect.size.width * 2, rect.size.height * 2);\n      return super.intersects(rectSW);\n    }\n\n    return false;\n  }\n\n}\n\nexports.CircleWarp = CircleWarp;","map":null,"metadata":{},"sourceType":"script"}