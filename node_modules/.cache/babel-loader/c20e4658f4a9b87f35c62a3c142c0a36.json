{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Mover = void 0;\n\nconst Utils_1 = require(\"../../Utils\");\n\nconst Enums_1 = require(\"../../Enums\");\n\nfunction applyDistance(particle) {\n  const initialPosition = particle.initialPosition;\n  const {\n    dx,\n    dy\n  } = Utils_1.getDistances(initialPosition, particle.position);\n  const dxFixed = Math.abs(dx),\n        dyFixed = Math.abs(dy);\n  const hDistance = particle.maxDistance.horizontal;\n  const vDistance = particle.maxDistance.vertical;\n\n  if (!hDistance && !vDistance) {\n    return;\n  }\n\n  if ((hDistance && dxFixed >= hDistance || vDistance && dyFixed >= vDistance) && !particle.misplaced) {\n    particle.misplaced = !!hDistance && dxFixed > hDistance || !!vDistance && dyFixed > vDistance;\n\n    if (hDistance) {\n      particle.velocity.x = particle.velocity.y / 2 - particle.velocity.x;\n    }\n\n    if (vDistance) {\n      particle.velocity.y = particle.velocity.x / 2 - particle.velocity.y;\n    }\n  } else if ((!hDistance || dxFixed < hDistance) && (!vDistance || dyFixed < vDistance) && particle.misplaced) {\n    particle.misplaced = false;\n  } else if (particle.misplaced) {\n    const pos = particle.position,\n          vel = particle.velocity;\n\n    if (hDistance && (pos.x < initialPosition.x && vel.x < 0 || pos.x > initialPosition.x && vel.x > 0)) {\n      vel.x *= -Math.random();\n    }\n\n    if (vDistance && (pos.y < initialPosition.y && vel.y < 0 || pos.y > initialPosition.y && vel.y > 0)) {\n      vel.y *= -Math.random();\n    }\n  }\n}\n\nclass Mover {\n  constructor(container) {\n    this.container = container;\n  }\n\n  move(particle, delta) {\n    if (particle.destroyed) {\n      return;\n    }\n\n    this.moveParticle(particle, delta);\n    this.moveParallax(particle);\n  }\n\n  moveParticle(particle, delta) {\n    var _a, _b, _c;\n\n    const particleOptions = particle.options;\n    const moveOptions = particleOptions.move;\n\n    if (!moveOptions.enable) {\n      return;\n    }\n\n    const container = this.container,\n          slowFactor = this.getProximitySpeedFactor(particle),\n          baseSpeed = ((_a = particle.moveSpeed) !== null && _a !== void 0 ? _a : particle.moveSpeed = Utils_1.getRangeValue(moveOptions.speed) * container.retina.pixelRatio) * container.retina.reduceFactor,\n          moveDrift = (_b = particle.moveDrift) !== null && _b !== void 0 ? _b : particle.moveDrift = Utils_1.getRangeValue(particle.options.move.drift) * container.retina.pixelRatio,\n          maxSize = Utils_1.getRangeMax(particleOptions.size.value) * container.retina.pixelRatio,\n          sizeFactor = moveOptions.size ? particle.getRadius() / maxSize : 1,\n          diffFactor = 2,\n          speedFactor = sizeFactor * slowFactor * delta.factor / diffFactor,\n          moveSpeed = baseSpeed * speedFactor;\n    this.applyPath(particle, delta);\n    const gravityOptions = moveOptions.gravity;\n    const gravityFactor = gravityOptions.enable && gravityOptions.inverse ? -1 : 1;\n\n    if (gravityOptions.enable) {\n      particle.velocity.y += gravityFactor * (gravityOptions.acceleration * delta.factor) / (60 * moveSpeed);\n    }\n\n    if (moveDrift && moveSpeed) {\n      particle.velocity.x += moveDrift * delta.factor / (60 * moveSpeed);\n    }\n\n    const decay = 1 - particle.options.move.decay;\n\n    if (decay != 1) {\n      particle.velocity.multTo(decay);\n    }\n\n    const velocity = particle.velocity.mult(moveSpeed);\n    const maxSpeed = (_c = particle.maxSpeed) !== null && _c !== void 0 ? _c : container.retina.maxSpeed;\n\n    if (gravityOptions.enable && gravityOptions.maxSpeed > 0 && (!gravityOptions.inverse && velocity.y >= 0 && velocity.y >= maxSpeed || gravityOptions.inverse && velocity.y <= 0 && velocity.y <= -maxSpeed)) {\n      velocity.y = gravityFactor * maxSpeed;\n\n      if (moveSpeed) {\n        particle.velocity.y = velocity.y / moveSpeed;\n      }\n    }\n\n    const zIndexOptions = particle.options.zIndex,\n          zVelocityFactor = 1 - zIndexOptions.velocityRate * particle.zIndexFactor;\n\n    if (moveOptions.spin.enable) {\n      this.spin(particle, moveSpeed);\n    } else {\n      if (zVelocityFactor != 1) {\n        velocity.multTo(zVelocityFactor);\n      }\n\n      particle.position.addTo(velocity);\n\n      if (moveOptions.vibrate) {\n        particle.position.x += Math.sin(particle.position.x * Math.cos(particle.position.y));\n        particle.position.y += Math.cos(particle.position.y * Math.sin(particle.position.x));\n      }\n    }\n\n    applyDistance(particle);\n  }\n\n  spin(particle, moveSpeed) {\n    const container = this.container;\n\n    if (!particle.spin) {\n      return;\n    }\n\n    const updateFunc = {\n      x: particle.spin.direction === Enums_1.RotateDirection.clockwise ? Math.cos : Math.sin,\n      y: particle.spin.direction === Enums_1.RotateDirection.clockwise ? Math.sin : Math.cos\n    };\n    particle.position.x = particle.spin.center.x + particle.spin.radius * updateFunc.x(particle.spin.angle);\n    particle.position.y = particle.spin.center.y + particle.spin.radius * updateFunc.y(particle.spin.angle);\n    particle.spin.radius += particle.spin.acceleration;\n    const maxCanvasSize = Math.min(container.canvas.size.width, container.canvas.size.height);\n\n    if (particle.spin.radius > maxCanvasSize / 2) {\n      particle.spin.radius = maxCanvasSize / 2;\n      particle.spin.acceleration *= -1;\n    } else if (particle.spin.radius < 0) {\n      particle.spin.radius = 0;\n      particle.spin.acceleration *= -1;\n    }\n\n    particle.spin.angle += moveSpeed / 100 * (1 - particle.spin.radius / maxCanvasSize);\n  }\n\n  applyPath(particle, delta) {\n    const particlesOptions = particle.options;\n    const pathOptions = particlesOptions.move.path;\n    const pathEnabled = pathOptions.enable;\n\n    if (!pathEnabled) {\n      return;\n    }\n\n    const container = this.container;\n\n    if (particle.lastPathTime <= particle.pathDelay) {\n      particle.lastPathTime += delta.value;\n      return;\n    }\n\n    let generator = container.pathGenerator;\n\n    if (pathOptions.generator) {\n      const customGenerator = Utils_1.Plugins.getPathGenerator(pathOptions.generator);\n\n      if (customGenerator) {\n        generator = customGenerator;\n      }\n    }\n\n    const path = generator.generate(particle);\n    particle.velocity.addTo(path);\n\n    if (pathOptions.clamp) {\n      particle.velocity.x = Utils_1.clamp(particle.velocity.x, -1, 1);\n      particle.velocity.y = Utils_1.clamp(particle.velocity.y, -1, 1);\n    }\n\n    particle.lastPathTime -= particle.pathDelay;\n  }\n\n  moveParallax(particle) {\n    const container = this.container;\n    const options = container.actualOptions;\n\n    if (Utils_1.isSsr() || !options.interactivity.events.onHover.parallax.enable) {\n      return;\n    }\n\n    const parallaxForce = options.interactivity.events.onHover.parallax.force;\n    const mousePos = container.interactivity.mouse.position;\n\n    if (!mousePos) {\n      return;\n    }\n\n    const canvasCenter = {\n      x: container.canvas.size.width / 2,\n      y: container.canvas.size.height / 2\n    };\n    const parallaxSmooth = options.interactivity.events.onHover.parallax.smooth;\n    const factor = particle.getRadius() / parallaxForce;\n    const tmp = {\n      x: (mousePos.x - canvasCenter.x) * factor,\n      y: (mousePos.y - canvasCenter.y) * factor\n    };\n    particle.offset.x += (tmp.x - particle.offset.x) / parallaxSmooth;\n    particle.offset.y += (tmp.y - particle.offset.y) / parallaxSmooth;\n  }\n\n  getProximitySpeedFactor(particle) {\n    const container = this.container;\n    const options = container.actualOptions;\n    const active = Utils_1.isInArray(Enums_1.HoverMode.slow, options.interactivity.events.onHover.mode);\n\n    if (!active) {\n      return 1;\n    }\n\n    const mousePos = this.container.interactivity.mouse.position;\n\n    if (!mousePos) {\n      return 1;\n    }\n\n    const particlePos = particle.getPosition();\n    const dist = Utils_1.getDistance(mousePos, particlePos);\n    const radius = container.retina.slowModeRadius;\n\n    if (dist > radius) {\n      return 1;\n    }\n\n    const proximityFactor = dist / radius || 0;\n    const slowFactor = options.interactivity.modes.slow.factor;\n    return proximityFactor / slowFactor;\n  }\n\n}\n\nexports.Mover = Mover;","map":null,"metadata":{},"sourceType":"script"}