{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.calcEasing = exports.collisionVelocity = exports.getParticleBaseVelocity = exports.getParticleDirectionAngle = exports.getDistance = exports.getDistances = exports.getValue = exports.setRangeValue = exports.getRangeMax = exports.getRangeMin = exports.getRangeValue = exports.randomInRange = exports.mix = exports.clamp = void 0;\n\nconst Enums_1 = require(\"../Enums\");\n\nconst Vector_1 = require(\"../Core/Particle/Vector\");\n\nfunction clamp(num, min, max) {\n  return Math.min(Math.max(num, min), max);\n}\n\nexports.clamp = clamp;\n\nfunction mix(comp1, comp2, weight1, weight2) {\n  return Math.floor((comp1 * weight1 + comp2 * weight2) / (weight1 + weight2));\n}\n\nexports.mix = mix;\n\nfunction randomInRange(r) {\n  const max = getRangeMax(r);\n  let min = getRangeMin(r);\n\n  if (max === min) {\n    min = 0;\n  }\n\n  return Math.random() * (max - min) + min;\n}\n\nexports.randomInRange = randomInRange;\n\nfunction getRangeValue(value) {\n  return typeof value === \"number\" ? value : randomInRange(value);\n}\n\nexports.getRangeValue = getRangeValue;\n\nfunction getRangeMin(value) {\n  return typeof value === \"number\" ? value : value.min;\n}\n\nexports.getRangeMin = getRangeMin;\n\nfunction getRangeMax(value) {\n  return typeof value === \"number\" ? value : value.max;\n}\n\nexports.getRangeMax = getRangeMax;\n\nfunction setRangeValue(source, value) {\n  if (source === value || value === undefined && typeof source === \"number\") {\n    return source;\n  }\n\n  const min = getRangeMin(source),\n        max = getRangeMax(source);\n  return value !== undefined ? {\n    min: Math.min(min, value),\n    max: Math.max(max, value)\n  } : setRangeValue(min, max);\n}\n\nexports.setRangeValue = setRangeValue;\n\nfunction getValue(options) {\n  const random = options.random;\n  const {\n    enable,\n    minimumValue\n  } = typeof random === \"boolean\" ? {\n    enable: random,\n    minimumValue: 0\n  } : random;\n  return enable ? getRangeValue(setRangeValue(options.value, minimumValue)) : getRangeValue(options.value);\n}\n\nexports.getValue = getValue;\n\nfunction getDistances(pointA, pointB) {\n  const dx = pointA.x - pointB.x;\n  const dy = pointA.y - pointB.y;\n  return {\n    dx: dx,\n    dy: dy,\n    distance: Math.sqrt(dx * dx + dy * dy)\n  };\n}\n\nexports.getDistances = getDistances;\n\nfunction getDistance(pointA, pointB) {\n  return getDistances(pointA, pointB).distance;\n}\n\nexports.getDistance = getDistance;\n\nfunction getParticleDirectionAngle(direction) {\n  if (typeof direction === \"number\") {\n    return direction * Math.PI / 180;\n  } else {\n    switch (direction) {\n      case Enums_1.MoveDirection.top:\n        return -Math.PI / 2;\n\n      case Enums_1.MoveDirection.topRight:\n        return -Math.PI / 4;\n\n      case Enums_1.MoveDirection.right:\n        return 0;\n\n      case Enums_1.MoveDirection.bottomRight:\n        return Math.PI / 4;\n\n      case Enums_1.MoveDirection.bottom:\n        return Math.PI / 2;\n\n      case Enums_1.MoveDirection.bottomLeft:\n        return 3 * Math.PI / 4;\n\n      case Enums_1.MoveDirection.left:\n        return Math.PI;\n\n      case Enums_1.MoveDirection.topLeft:\n        return -3 * Math.PI / 4;\n\n      case Enums_1.MoveDirection.none:\n      default:\n        return Math.random() * Math.PI * 2;\n    }\n  }\n}\n\nexports.getParticleDirectionAngle = getParticleDirectionAngle;\n\nfunction getParticleBaseVelocity(direction) {\n  const baseVelocity = Vector_1.Vector.origin;\n  baseVelocity.length = 1;\n  baseVelocity.angle = direction;\n  return baseVelocity;\n}\n\nexports.getParticleBaseVelocity = getParticleBaseVelocity;\n\nfunction collisionVelocity(v1, v2, m1, m2) {\n  return Vector_1.Vector.create(v1.x * (m1 - m2) / (m1 + m2) + v2.x * 2 * m2 / (m1 + m2), v1.y);\n}\n\nexports.collisionVelocity = collisionVelocity;\n\nfunction calcEasing(value, type) {\n  switch (type) {\n    case Enums_1.EasingType.easeOutQuad:\n      return 1 - Math.pow(1 - value, 2);\n\n    case Enums_1.EasingType.easeOutCubic:\n      return 1 - Math.pow(1 - value, 3);\n\n    case Enums_1.EasingType.easeOutQuart:\n      return 1 - Math.pow(1 - value, 4);\n\n    case Enums_1.EasingType.easeOutQuint:\n      return 1 - Math.pow(1 - value, 5);\n\n    case Enums_1.EasingType.easeOutExpo:\n      return value === 1 ? 1 : 1 - Math.pow(2, -10 * value);\n\n    case Enums_1.EasingType.easeOutSine:\n      return Math.sin(value * Math.PI / 2);\n\n    case Enums_1.EasingType.easeOutBack:\n      {\n        const c1 = 1.70158;\n        const c3 = c1 + 1;\n        return 1 + c3 * Math.pow(value - 1, 3) + c1 * Math.pow(value - 1, 2);\n      }\n\n    case Enums_1.EasingType.easeOutCirc:\n      return Math.sqrt(1 - Math.pow(value - 1, 2));\n\n    default:\n      return value;\n  }\n}\n\nexports.calcEasing = calcEasing;","map":null,"metadata":{},"sourceType":"script"}