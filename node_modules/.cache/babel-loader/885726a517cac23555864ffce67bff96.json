{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Repulser = void 0;\n\nvar Enums_1 = require(\"../../../../Enums\");\n\nvar Utils_1 = require(\"../../../../Utils\");\n\nvar Repulser = function () {\n  function Repulser() {}\n\n  Repulser.repulse = function (container, _delta) {\n    var options = container.options;\n    var mouseMoveStatus = container.interactivity.status === Utils_1.Constants.mouseMoveEvent;\n    var events = options.interactivity.events;\n    var hoverEnabled = events.onHover.enable;\n    var hoverMode = events.onHover.mode;\n    var clickEnabled = events.onClick.enable;\n    var clickMode = events.onClick.mode;\n    var divMode = events.onDiv.mode;\n    var divEnabled = events.onDiv.enable;\n\n    if (mouseMoveStatus && hoverEnabled && Utils_1.Utils.isInArray(Enums_1.HoverMode.repulse, hoverMode)) {\n      this.hoverRepulse(container);\n    } else if (clickEnabled && Utils_1.Utils.isInArray(Enums_1.ClickMode.repulse, clickMode)) {\n      this.clickRepulse(container);\n    } else if (divEnabled && Utils_1.Utils.isInArray(Enums_1.DivMode.repulse, divMode)) {\n      this.divRepulse(container);\n    }\n  };\n\n  Repulser.divRepulse = function (container) {\n    var options = container.options;\n    var elem = document.getElementById(options.interactivity.events.onDiv.elementId);\n\n    if (!elem) {\n      return;\n    }\n\n    var pxRatio = container.retina.pixelRatio;\n    var pos = {\n      x: (elem.offsetLeft + elem.offsetWidth / 2) * pxRatio,\n      y: (elem.offsetTop + elem.offsetHeight / 2) * pxRatio\n    };\n    var repulseRadius = elem.offsetWidth / 2 * pxRatio;\n    this.processRepulse(container, pos, repulseRadius);\n  };\n\n  Repulser.hoverRepulse = function (container) {\n    var mousePos = container.interactivity.mouse.position;\n\n    if (!mousePos) {\n      return;\n    }\n\n    var repulseRadius = container.retina.repulseModeDistance;\n    this.processRepulse(container, mousePos, repulseRadius);\n  };\n\n  Repulser.processRepulse = function (container, position, repulseRadius) {\n    var query = container.particles.quadTree.query(new Utils_1.Circle(position.x, position.y, repulseRadius));\n\n    for (var _i = 0, query_1 = query; _i < query_1.length; _i++) {\n      var particle = query_1[_i];\n\n      var _a = Utils_1.Utils.getDistances(particle.position, position),\n          dx = _a.dx,\n          dy = _a.dy,\n          distance = _a.distance;\n\n      var normVec = {\n        x: dx / distance,\n        y: dy / distance\n      };\n      var velocity = container.options.interactivity.modes.repulse.speed * 100;\n      var repulseFactor = Utils_1.Utils.clamp((1 - Math.pow(distance / repulseRadius, 2)) * velocity, 0, 50);\n      var outMode = particle.particlesOptions.move.outMode;\n      var sizeValue = particle.size.value;\n      var pos = {\n        x: particle.position.x + normVec.x * repulseFactor,\n        y: particle.position.y + normVec.y * repulseFactor\n      };\n\n      if (outMode === Enums_1.OutMode.bounce || outMode === Enums_1.OutMode.bounceVertical || outMode === Enums_1.OutMode.bounceHorizontal) {\n        var isInside = {\n          horizontal: pos.x - sizeValue > 0 && pos.x + sizeValue < container.canvas.size.width,\n          vertical: pos.y - sizeValue > 0 && pos.y + sizeValue < container.canvas.size.height\n        };\n\n        if (outMode === Enums_1.OutMode.bounceVertical || isInside.horizontal) {\n          particle.position.x = pos.x;\n        }\n\n        if (outMode === Enums_1.OutMode.bounceHorizontal || isInside.vertical) {\n          particle.position.y = pos.y;\n        }\n      } else {\n        particle.position.x = pos.x;\n        particle.position.y = pos.y;\n      }\n    }\n  };\n\n  Repulser.clickRepulse = function (container) {\n    if (!container.repulse.finish) {\n      if (!container.repulse.count) {\n        container.repulse.count = 0;\n      }\n\n      container.repulse.count++;\n\n      if (container.repulse.count === container.particles.count) {\n        container.repulse.finish = true;\n      }\n    }\n\n    if (container.repulse.clicking) {\n      var repulseDistance = container.retina.repulseModeDistance;\n      var repulseRadius = Math.pow(repulseDistance / 6, 3);\n      var mouseClickPos = container.interactivity.mouse.clickPosition;\n\n      if (mouseClickPos === undefined) {\n        return;\n      }\n\n      var range = new Utils_1.Circle(mouseClickPos.x, mouseClickPos.y, repulseRadius);\n      var query = container.particles.quadTree.query(range);\n\n      for (var _i = 0, query_2 = query; _i < query_2.length; _i++) {\n        var particle = query_2[_i];\n\n        var _a = Utils_1.Utils.getDistances(mouseClickPos, particle.position),\n            dx = _a.dx,\n            dy = _a.dy,\n            distance = _a.distance;\n\n        var d = distance * distance;\n        var velocity = container.options.interactivity.modes.repulse.speed;\n        var force = -repulseRadius * velocity / d;\n\n        if (d <= repulseRadius) {\n          container.repulse.particles.push(particle);\n          this.processClickRepulse(container, particle, dx, dy, force);\n        }\n      }\n    } else if (container.repulse.clicking === false) {\n      for (var _b = 0, _c = container.repulse.particles; _b < _c.length; _b++) {\n        var particle = _c[_b];\n        particle.velocity.horizontal = particle.initialVelocity.horizontal;\n        particle.velocity.vertical = particle.initialVelocity.vertical;\n      }\n\n      container.repulse.particles = [];\n    }\n  };\n\n  Repulser.processClickRepulse = function (container, particle, dx, dy, force) {\n    var options = container.options;\n    var f = Math.atan2(dy, dx);\n    particle.velocity.horizontal = force * Math.cos(f);\n    particle.velocity.vertical = force * Math.sin(f);\n    var outMode = options.particles.move.outMode;\n\n    if (outMode === Enums_1.OutMode.bounce || outMode === Enums_1.OutMode.bounceHorizontal || outMode === Enums_1.OutMode.bounceVertical) {\n      var pos = {\n        x: particle.position.x + particle.velocity.horizontal,\n        y: particle.position.y + particle.velocity.vertical\n      };\n\n      if (outMode !== Enums_1.OutMode.bounceVertical) {\n        if (pos.x + particle.size.value > container.canvas.size.width || pos.x - particle.size.value < 0) {\n          particle.velocity.horizontal *= -1;\n        }\n      }\n\n      if (outMode !== Enums_1.OutMode.bounceHorizontal) {\n        if (pos.y + particle.size.value > container.canvas.size.height || pos.y - particle.size.value < 0) {\n          particle.velocity.vertical *= -1;\n        }\n      }\n    }\n  };\n\n  return Repulser;\n}();\n\nexports.Repulser = Repulser;","map":null,"metadata":{},"sourceType":"script"}