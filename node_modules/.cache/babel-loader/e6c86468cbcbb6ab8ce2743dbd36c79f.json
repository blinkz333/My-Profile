{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Particles = void 0;\n\nvar Particle_1 = require(\"./Particle\");\n\nvar InteractionManager_1 = require(\"./Particle/Interactions/Particles/InteractionManager\");\n\nvar Grabber_1 = require(\"./Particle/Interactions/Mouse/Grabber\");\n\nvar Enums_1 = require(\"../Enums\");\n\nvar Repulser_1 = require(\"./Particle/Interactions/Mouse/Repulser\");\n\nvar Bubbler_1 = require(\"./Particle/Interactions/Mouse/Bubbler\");\n\nvar Connector_1 = require(\"./Particle/Interactions/Mouse/Connector\");\n\nvar Utils_1 = require(\"../Utils\");\n\nvar Particles = function () {\n  function Particles(container) {\n    this.container = container;\n    this.array = [];\n    this.interactionsEnabled = false;\n    var canvasSize = this.container.canvas.size;\n    this.noiseZ = 0;\n    this.linksColors = {};\n    this.quadTree = new Utils_1.QuadTree(new Utils_1.Rectangle(0, 0, canvasSize.width, canvasSize.height), 4);\n  }\n\n  Object.defineProperty(Particles.prototype, \"count\", {\n    get: function () {\n      return this.array.length;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  Particles.prototype.init = function () {\n    var container = this.container;\n    var options = container.options;\n    var handled = false;\n    this.noiseZ = 0;\n\n    for (var id in container.plugins) {\n      var plugin = container.plugins[id];\n\n      if (plugin.particlesInitialization !== undefined) {\n        handled = plugin.particlesInitialization();\n      }\n\n      if (handled) {\n        break;\n      }\n    }\n\n    if (!handled) {\n      for (var i = this.count; i < options.particles.number.value; i++) {\n        this.addParticle();\n      }\n    }\n\n    this.interactionsEnabled = options.particles.links.enable || options.particles.move.attract.enable || options.particles.collisions.enable || options.infection.enable;\n\n    if (options.infection.enable) {\n      for (var i = 0; i < options.infection.infections; i++) {\n        var notInfected = this.array.filter(function (p) {\n          return p.infectionStage === undefined;\n        });\n        var infected = Utils_1.Utils.itemFromArray(notInfected);\n        infected.startInfection(0);\n      }\n    }\n  };\n\n  Particles.prototype.redraw = function () {\n    this.clear();\n    this.init();\n    this.draw(0);\n  };\n\n  Particles.prototype.removeAt = function (index, quantity) {\n    if (index >= 0 && index <= this.count) {\n      for (var _i = 0, _a = this.array.splice(index, quantity !== null && quantity !== void 0 ? quantity : 1); _i < _a.length; _i++) {\n        var particle = _a[_i];\n        particle.destroy();\n      }\n    }\n  };\n\n  Particles.prototype.remove = function (particle) {\n    this.removeAt(this.array.indexOf(particle));\n  };\n\n  Particles.prototype.update = function (delta) {\n    var container = this.container;\n    var options = container.options;\n    var particlesToDelete = [];\n\n    for (var i = 0; i < this.count; i++) {\n      var particle = this.array[i];\n      particle.bubble.inRange = false;\n\n      for (var id in container.plugins) {\n        var plugin = container.plugins[id];\n\n        if (particle.destroyed) {\n          break;\n        }\n\n        if (plugin.particleUpdate) {\n          plugin.particleUpdate(particle, delta);\n        }\n      }\n\n      if (!particle.destroyed) {\n        var sizeOpt = particle.particlesOptions.size;\n        var sizeAnim = sizeOpt.animation;\n\n        if (sizeAnim.enable) {\n          switch (sizeAnim.destroy) {\n            case Enums_1.DestroyType.max:\n              if (particle.size.value >= sizeOpt.value * container.retina.pixelRatio) {\n                particle.destroyed = true;\n              }\n\n              break;\n\n            case Enums_1.DestroyType.min:\n              if (particle.size.value <= sizeAnim.minimumValue * container.retina.pixelRatio) {\n                particle.destroyed = true;\n              }\n\n              break;\n          }\n        }\n      }\n\n      if (particle.destroyed) {\n        particlesToDelete.push(particle);\n        continue;\n      }\n\n      particle.update(i, delta);\n      var pos = particle.getPosition();\n      this.quadTree.insert(new Utils_1.Point(pos, particle));\n    }\n\n    for (var _i = 0, particlesToDelete_1 = particlesToDelete; _i < particlesToDelete_1.length; _i++) {\n      var particle = particlesToDelete_1[_i];\n      this.remove(particle);\n    }\n\n    if (container.options.interactivity.events.onDiv.enable || container.options.interactivity.events.onHover.enable && container.interactivity.mouse.position || container.options.interactivity.events.onClick.enable && container.interactivity.mouse.clickPosition) {\n      var hoverMode = options.interactivity.events.onHover.mode;\n      var clickMode = options.interactivity.events.onClick.mode;\n      var divMode = options.interactivity.events.onDiv.mode;\n\n      if (Utils_1.Utils.isInArray(Enums_1.HoverMode.grab, hoverMode)) {\n        Grabber_1.Grabber.grab(container, delta);\n      }\n\n      if (Utils_1.Utils.isInArray(Enums_1.HoverMode.repulse, hoverMode) || Utils_1.Utils.isInArray(Enums_1.ClickMode.repulse, clickMode) || Utils_1.Utils.isInArray(Enums_1.DivMode.repulse, divMode)) {\n        Repulser_1.Repulser.repulse(container, delta);\n      }\n\n      if (Utils_1.Utils.isInArray(Enums_1.HoverMode.bubble, hoverMode) || Utils_1.Utils.isInArray(Enums_1.ClickMode.bubble, clickMode)) {\n        Bubbler_1.Bubbler.bubble(container, delta);\n      }\n\n      if (Utils_1.Utils.isInArray(Enums_1.HoverMode.connect, hoverMode)) {\n        Connector_1.Connector.connect(container, delta);\n      }\n    }\n\n    for (var _a = 0, _b = this.array; _a < _b.length; _a++) {\n      var particle = _b[_a];\n      Bubbler_1.Bubbler.reset(particle);\n\n      if (this.interactionsEnabled) {\n        InteractionManager_1.InteractionManager.interact(particle, container, delta);\n      }\n    }\n  };\n\n  Particles.prototype.draw = function (delta) {\n    var container = this.container;\n    container.canvas.clear();\n    var canvasSize = this.container.canvas.size;\n    this.quadTree = new Utils_1.QuadTree(new Utils_1.Rectangle(0, 0, canvasSize.width, canvasSize.height), 4);\n    this.update(delta);\n    this.noiseZ += 0.0004;\n\n    for (var id in container.plugins) {\n      var plugin = container.plugins[id];\n      container.canvas.drawPlugin(plugin, delta);\n    }\n\n    for (var _i = 0, _a = this.array; _i < _a.length; _i++) {\n      var p = _a[_i];\n      p.draw(delta);\n    }\n  };\n\n  Particles.prototype.clear = function () {\n    this.array = [];\n  };\n\n  Particles.prototype.push = function (nb, mousePosition) {\n    var _a;\n\n    var container = this.container;\n    var options = container.options;\n    var limit = options.particles.number.limit * container.density;\n    this.pushing = true;\n\n    if (limit > 0) {\n      var countToRemove = this.count + nb - limit;\n\n      if (countToRemove > 0) {\n        this.removeQuantity(countToRemove);\n      }\n    }\n\n    var pos;\n\n    if (mousePosition) {\n      pos = (_a = mousePosition.position) !== null && _a !== void 0 ? _a : {\n        x: 0,\n        y: 0\n      };\n    }\n\n    for (var i = 0; i < nb; i++) {\n      this.addParticle(pos);\n    }\n\n    if (!options.particles.move.enable) {\n      this.container.play();\n    }\n\n    this.pushing = false;\n  };\n\n  Particles.prototype.addParticle = function (position, overrideOptions) {\n    var particle = new Particle_1.Particle(this.container, position, overrideOptions);\n    this.array.push(particle);\n    return particle;\n  };\n\n  Particles.prototype.removeQuantity = function (quantity) {\n    var container = this.container;\n    var options = container.options;\n    this.removeAt(0, quantity);\n\n    if (!options.particles.move.enable) {\n      this.container.play();\n    }\n  };\n\n  return Particles;\n}();\n\nexports.Particles = Particles;","map":null,"metadata":{},"sourceType":"script"}