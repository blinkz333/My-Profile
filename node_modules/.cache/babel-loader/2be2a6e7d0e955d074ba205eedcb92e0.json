{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\n\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\n\nvar _ImageDrawer_images;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ImageDrawer = void 0;\n\nconst Utils_1 = require(\"../../Utils\");\n\nconst Enums_1 = require(\"../../Enums\");\n\nconst Utils_2 = require(\"./Utils\");\n\nclass ImageDrawer {\n  constructor() {\n    _ImageDrawer_images.set(this, void 0);\n\n    __classPrivateFieldSet(this, _ImageDrawer_images, [], \"f\");\n  }\n\n  getSidesCount() {\n    return 12;\n  }\n\n  getImages(container) {\n    const containerImages = __classPrivateFieldGet(this, _ImageDrawer_images, \"f\").find(t => t.id === container.id);\n\n    if (!containerImages) {\n      __classPrivateFieldGet(this, _ImageDrawer_images, \"f\").push({\n        id: container.id,\n        images: []\n      });\n\n      return this.getImages(container);\n    } else {\n      return containerImages;\n    }\n  }\n\n  addImage(container, image) {\n    const containerImages = this.getImages(container);\n    containerImages === null || containerImages === void 0 ? void 0 : containerImages.images.push(image);\n  }\n\n  init(container) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.loadImagesFromParticlesOptions(container, container.actualOptions.particles);\n      yield this.loadImagesFromParticlesOptions(container, container.actualOptions.interactivity.modes.trail.particles);\n\n      for (const manualParticle of container.actualOptions.manualParticles) {\n        yield this.loadImagesFromParticlesOptions(container, manualParticle.options);\n      }\n\n      const emitterOptions = container.actualOptions;\n\n      if (emitterOptions.emitters) {\n        if (emitterOptions.emitters instanceof Array) {\n          for (const emitter of emitterOptions.emitters) {\n            yield this.loadImagesFromParticlesOptions(container, emitter.particles);\n          }\n        } else {\n          yield this.loadImagesFromParticlesOptions(container, emitterOptions.emitters.particles);\n        }\n      }\n\n      const interactiveEmitters = emitterOptions.interactivity.modes.emitters;\n\n      if (interactiveEmitters) {\n        if (interactiveEmitters instanceof Array) {\n          for (const emitter of interactiveEmitters) {\n            yield this.loadImagesFromParticlesOptions(container, emitter.particles);\n          }\n        } else {\n          yield this.loadImagesFromParticlesOptions(container, interactiveEmitters.particles);\n        }\n      }\n    });\n  }\n\n  destroy() {\n    __classPrivateFieldSet(this, _ImageDrawer_images, [], \"f\");\n  }\n\n  loadImagesFromParticlesOptions(container, options) {\n    var _a, _b, _c;\n\n    return __awaiter(this, void 0, void 0, function* () {\n      const shapeOptions = options === null || options === void 0 ? void 0 : options.shape;\n\n      if (!(shapeOptions === null || shapeOptions === void 0 ? void 0 : shapeOptions.type) || !shapeOptions.options || !Utils_1.isInArray(Enums_1.ShapeType.image, shapeOptions.type) && !Utils_1.isInArray(Enums_1.ShapeType.images, shapeOptions.type)) {\n        return;\n      }\n\n      const idx = __classPrivateFieldGet(this, _ImageDrawer_images, \"f\").findIndex(t => t.id === container.id);\n\n      if (idx >= 0) {\n        __classPrivateFieldGet(this, _ImageDrawer_images, \"f\").splice(idx, 1);\n      }\n\n      const imageOptions = (_a = shapeOptions.options[Enums_1.ShapeType.images]) !== null && _a !== void 0 ? _a : shapeOptions.options[Enums_1.ShapeType.image];\n\n      if (imageOptions instanceof Array) {\n        for (const optionsImage of imageOptions) {\n          yield this.loadImageShape(container, optionsImage);\n        }\n      } else {\n        yield this.loadImageShape(container, imageOptions);\n      }\n\n      if (options === null || options === void 0 ? void 0 : options.groups) {\n        for (const groupName in options.groups) {\n          const group = options.groups[groupName];\n          yield this.loadImagesFromParticlesOptions(container, group);\n        }\n      }\n\n      if ((_c = (_b = options === null || options === void 0 ? void 0 : options.destroy) === null || _b === void 0 ? void 0 : _b.split) === null || _c === void 0 ? void 0 : _c.particles) {\n        yield this.loadImagesFromParticlesOptions(container, options === null || options === void 0 ? void 0 : options.destroy.split.particles);\n      }\n    });\n  }\n\n  loadImageShape(container, imageShape) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const imageFunc = imageShape.replaceColor ? Utils_2.downloadSvgImage : Utils_2.loadImage;\n        const image = yield imageFunc(imageShape.src);\n\n        if (image) {\n          this.addImage(container, image);\n        }\n      } catch (_a) {\n        console.warn(`tsParticles error - ${imageShape.src} not found`);\n      }\n    });\n  }\n\n  draw(context, particle, radius, opacity) {\n    var _a, _b;\n\n    if (!context) {\n      return;\n    }\n\n    const image = particle.image;\n    const element = (_a = image === null || image === void 0 ? void 0 : image.data) === null || _a === void 0 ? void 0 : _a.element;\n\n    if (!element) {\n      return;\n    }\n\n    const ratio = (_b = image === null || image === void 0 ? void 0 : image.ratio) !== null && _b !== void 0 ? _b : 1;\n    const pos = {\n      x: -radius,\n      y: -radius\n    };\n\n    if (!(image === null || image === void 0 ? void 0 : image.data.svgData) || !(image === null || image === void 0 ? void 0 : image.replaceColor)) {\n      context.globalAlpha = opacity;\n    }\n\n    context.drawImage(element, pos.x, pos.y, radius * 2, radius * 2 / ratio);\n\n    if (!(image === null || image === void 0 ? void 0 : image.data.svgData) || !(image === null || image === void 0 ? void 0 : image.replaceColor)) {\n      context.globalAlpha = 1;\n    }\n  }\n\n  loadShape(particle) {\n    var _a, _b, _c, _d, _e;\n\n    if (particle.shape !== \"image\" && particle.shape !== \"images\") {\n      return;\n    }\n\n    const container = particle.container;\n    const images = this.getImages(container).images;\n    const imageData = particle.shapeData;\n    const image = (_a = images.find(t => t.source === imageData.src)) !== null && _a !== void 0 ? _a : images[0];\n    const color = particle.getFillColor();\n    let imageRes;\n\n    if (!image) {\n      return;\n    }\n\n    if (image.svgData !== undefined && imageData.replaceColor && color) {\n      const svgColoredData = Utils_2.replaceColorSvg(image, color, particle.opacity.value);\n      const svg = new Blob([svgColoredData], {\n        type: \"image/svg+xml\"\n      });\n      const domUrl = URL || window.URL || window.webkitURL || window;\n      const url = domUrl.createObjectURL(svg);\n      const img = new Image();\n      imageRes = {\n        data: Object.assign(Object.assign({}, image), {\n          svgData: svgColoredData\n        }),\n        ratio: imageData.width / imageData.height,\n        replaceColor: (_b = imageData.replaceColor) !== null && _b !== void 0 ? _b : imageData.replace_color,\n        source: imageData.src\n      };\n      img.addEventListener(\"load\", () => {\n        const pImage = particle.image;\n\n        if (pImage) {\n          pImage.loaded = true;\n          image.element = img;\n        }\n\n        domUrl.revokeObjectURL(url);\n      });\n      img.addEventListener(\"error\", () => {\n        domUrl.revokeObjectURL(url);\n        Utils_2.loadImage(imageData.src).then(img2 => {\n          const pImage = particle.image;\n\n          if (pImage) {\n            image.element = img2 === null || img2 === void 0 ? void 0 : img2.element;\n            pImage.loaded = true;\n          }\n        });\n      });\n      img.src = url;\n    } else {\n      imageRes = {\n        data: image,\n        loaded: true,\n        ratio: imageData.width / imageData.height,\n        replaceColor: (_c = imageData.replaceColor) !== null && _c !== void 0 ? _c : imageData.replace_color,\n        source: imageData.src\n      };\n    }\n\n    if (!imageRes.ratio) {\n      imageRes.ratio = 1;\n    }\n\n    const fill = (_d = imageData.fill) !== null && _d !== void 0 ? _d : particle.fill;\n    const close = (_e = imageData.close) !== null && _e !== void 0 ? _e : particle.close;\n    const imageShape = {\n      image: imageRes,\n      fill,\n      close\n    };\n    particle.image = imageShape.image;\n    particle.fill = imageShape.fill;\n    particle.close = imageShape.close;\n  }\n\n}\n\nexports.ImageDrawer = ImageDrawer;\n_ImageDrawer_images = new WeakMap();","map":null,"metadata":{},"sourceType":"script"}