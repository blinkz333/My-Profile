{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CanvasUtils = void 0;\n\nvar ColorUtils_1 = require(\"./ColorUtils\");\n\nvar Utils_1 = require(\"./Utils\");\n\nvar CanvasUtils = function () {\n  function CanvasUtils() {}\n\n  CanvasUtils.paintBase = function (context, dimension, baseColor) {\n    context.save();\n    context.fillStyle = baseColor !== null && baseColor !== void 0 ? baseColor : \"rgba(0,0,0,0)\";\n    context.fillRect(0, 0, dimension.width, dimension.height);\n    context.restore();\n  };\n\n  CanvasUtils.clear = function (context, dimension) {\n    context.clearRect(0, 0, dimension.width, dimension.height);\n  };\n\n  CanvasUtils.drawLinkLine = function (context, width, begin, end, maxDistance, canvasSize, warp, backgroundMask, colorLine, opacity, shadow) {\n    var drawn = false;\n\n    if (Utils_1.Utils.getDistance(begin, end) <= maxDistance) {\n      this.drawLine(context, begin, end);\n      drawn = true;\n    } else if (warp) {\n      var pi1 = void 0;\n      var pi2 = void 0;\n      var endNE = {\n        x: end.x - canvasSize.width,\n        y: end.y\n      };\n\n      var _a = Utils_1.Utils.getDistances(begin, endNE),\n          dx = _a.dx,\n          dy = _a.dy,\n          distance = _a.distance;\n\n      if (distance <= maxDistance) {\n        var yi = begin.y - dy / dx * begin.x;\n        pi1 = {\n          x: 0,\n          y: yi\n        };\n        pi2 = {\n          x: canvasSize.width,\n          y: yi\n        };\n      } else {\n        var endSW = {\n          x: end.x,\n          y: end.y - canvasSize.height\n        };\n\n        var _b = Utils_1.Utils.getDistances(begin, endSW),\n            dx_1 = _b.dx,\n            dy_1 = _b.dy,\n            distance_1 = _b.distance;\n\n        if (distance_1 <= maxDistance) {\n          var yi = begin.y - dy_1 / dx_1 * begin.x;\n          var xi = -yi / (dy_1 / dx_1);\n          pi1 = {\n            x: xi,\n            y: 0\n          };\n          pi2 = {\n            x: xi,\n            y: canvasSize.height\n          };\n        } else {\n          var endSE = {\n            x: end.x - canvasSize.width,\n            y: end.y - canvasSize.height\n          };\n\n          var _c = Utils_1.Utils.getDistances(begin, endSE),\n              dx_2 = _c.dx,\n              dy_2 = _c.dy,\n              distance_2 = _c.distance;\n\n          if (distance_2 <= maxDistance) {\n            var yi = begin.y - dy_2 / dx_2 * begin.x;\n            var xi = -yi / (dy_2 / dx_2);\n            pi1 = {\n              x: xi,\n              y: yi\n            };\n            pi2 = {\n              x: pi1.x + canvasSize.width,\n              y: pi1.y + canvasSize.height\n            };\n          }\n        }\n      }\n\n      if (pi1 && pi2) {\n        this.drawLine(context, begin, pi1);\n        this.drawLine(context, end, pi2);\n        drawn = true;\n      }\n    }\n\n    if (!drawn) {\n      return;\n    }\n\n    context.lineWidth = width;\n\n    if (backgroundMask) {\n      context.globalCompositeOperation = \"destination-out\";\n    }\n\n    context.strokeStyle = ColorUtils_1.ColorUtils.getStyleFromRgb(colorLine, opacity);\n\n    if (shadow.enable) {\n      var shadowColor = ColorUtils_1.ColorUtils.colorToRgb(shadow.color);\n\n      if (shadowColor) {\n        context.shadowBlur = shadow.blur;\n        context.shadowColor = ColorUtils_1.ColorUtils.getStyleFromRgb(shadowColor);\n      }\n    }\n\n    context.stroke();\n  };\n\n  CanvasUtils.drawLinkTriangle = function (context, width, pos1, pos2, pos3, backgroundMask, colorTriangle, opacityTriangle) {\n    this.drawTriangle(context, pos1, pos2, pos3);\n    context.lineWidth = width;\n\n    if (backgroundMask) {\n      context.globalCompositeOperation = \"destination-out\";\n    }\n\n    context.fillStyle = ColorUtils_1.ColorUtils.getStyleFromRgb(colorTriangle, opacityTriangle);\n    context.fill();\n  };\n\n  CanvasUtils.drawConnectLine = function (context, width, lineStyle, begin, end) {\n    context.save();\n    this.drawLine(context, begin, end);\n    context.lineWidth = width;\n    context.strokeStyle = lineStyle;\n    context.stroke();\n    context.restore();\n  };\n\n  CanvasUtils.gradient = function (context, p1, p2, opacity) {\n    var gradStop = Math.floor(p2.size.value / p1.size.value);\n    var color1 = p1.getColor();\n    var color2 = p2.getColor();\n\n    if (!color1 || !color2) {\n      return;\n    }\n\n    var sourcePos = p1.getPosition();\n    var destPos = p2.getPosition();\n    var midRgb = ColorUtils_1.ColorUtils.mix(color1, color2, p1.size.value, p2.size.value);\n    var grad = context.createLinearGradient(sourcePos.x, sourcePos.y, destPos.x, destPos.y);\n    grad.addColorStop(0, ColorUtils_1.ColorUtils.getStyleFromHsl(color1, opacity));\n    grad.addColorStop(gradStop > 1 ? 1 : gradStop, ColorUtils_1.ColorUtils.getStyleFromRgb(midRgb, opacity));\n    grad.addColorStop(1, ColorUtils_1.ColorUtils.getStyleFromHsl(color2, opacity));\n    return grad;\n  };\n\n  CanvasUtils.drawGrabLine = function (context, width, begin, end, colorLine, opacity) {\n    context.save();\n    this.drawLine(context, begin, end);\n    context.strokeStyle = ColorUtils_1.ColorUtils.getStyleFromRgb(colorLine, opacity);\n    context.lineWidth = width;\n    context.stroke();\n    context.restore();\n  };\n\n  CanvasUtils.drawParticle = function (container, context, particle, delta, colorValue, backgroundMask, radius, opacity, shadow) {\n    var pos = particle.getPosition();\n    context.save();\n    context.translate(pos.x, pos.y);\n    context.beginPath();\n\n    if (particle.angle !== 0) {\n      context.rotate(particle.angle * Math.PI / 180);\n    }\n\n    if (backgroundMask) {\n      context.globalCompositeOperation = \"destination-out\";\n    }\n\n    var shadowColor = particle.shadowColor;\n\n    if (shadow.enable && shadowColor) {\n      context.shadowBlur = shadow.blur;\n      context.shadowColor = ColorUtils_1.ColorUtils.getStyleFromRgb(shadowColor);\n      context.shadowOffsetX = shadow.offset.x;\n      context.shadowOffsetY = shadow.offset.y;\n    }\n\n    context.fillStyle = colorValue;\n    var stroke = particle.stroke;\n    context.lineWidth = stroke.width;\n\n    if (particle.strokeColor) {\n      context.strokeStyle = ColorUtils_1.ColorUtils.getStyleFromRgb(particle.strokeColor, particle.stroke.opacity);\n    }\n\n    if (particle.close) {\n      context.closePath();\n    }\n\n    this.drawShape(container, context, particle, radius, opacity, delta);\n\n    if (stroke.width > 0 && particle.strokeColor) {\n      context.stroke();\n    }\n\n    if (particle.fill) {\n      context.fill();\n    }\n\n    context.restore();\n    context.save();\n    context.translate(pos.x, pos.y);\n\n    if (particle.angle !== 0) {\n      context.rotate(particle.angle * Math.PI / 180);\n    }\n\n    if (backgroundMask) {\n      context.globalCompositeOperation = \"destination-out\";\n    }\n\n    this.drawShapeAfterEffect(container, context, particle, radius, opacity, delta);\n    context.restore();\n  };\n\n  CanvasUtils.drawShape = function (container, context, particle, radius, opacity, delta) {\n    if (!particle.shape) {\n      return;\n    }\n\n    var drawer = container.drawers[particle.shape];\n\n    if (!drawer) {\n      return;\n    }\n\n    drawer.draw(context, particle, radius, opacity, delta);\n  };\n\n  CanvasUtils.drawShapeAfterEffect = function (container, context, particle, radius, opacity, delta) {\n    if (!particle.shape) {\n      return;\n    }\n\n    var drawer = container.drawers[particle.shape];\n\n    if (!(drawer === null || drawer === void 0 ? void 0 : drawer.afterEffect)) {\n      return;\n    }\n\n    drawer.afterEffect(context, particle, radius, opacity, delta);\n  };\n\n  CanvasUtils.drawPlugin = function (context, plugin, delta) {\n    if (plugin.draw !== undefined) {\n      context.save();\n      plugin.draw(context, delta);\n      context.restore();\n    }\n  };\n\n  CanvasUtils.drawLine = function (context, begin, end) {\n    context.beginPath();\n    context.moveTo(begin.x, begin.y);\n    context.lineTo(end.x, end.y);\n    context.closePath();\n  };\n\n  CanvasUtils.drawTriangle = function (context, p1, p2, p3) {\n    context.beginPath();\n    context.moveTo(p1.x, p1.y);\n    context.lineTo(p2.x, p2.y);\n    context.lineTo(p3.x, p3.y);\n    context.closePath();\n  };\n\n  return CanvasUtils;\n}();\n\nexports.CanvasUtils = CanvasUtils;","map":null,"metadata":{},"sourceType":"script"}