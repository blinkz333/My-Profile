{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Particle = void 0;\n\nconst ParticlesOptions_1 = require(\"../Options/Classes/Particles/ParticlesOptions\");\n\nconst Shape_1 = require(\"../Options/Classes/Particles/Shape/Shape\");\n\nconst Enums_1 = require(\"../Enums\");\n\nconst Utils_1 = require(\"../Utils\");\n\nconst Vector_1 = require(\"./Particle/Vector\");\n\nconst Vector3d_1 = require(\"./Particle/Vector3d\");\n\nclass Particle {\n  constructor(id, container, position, overrideOptions, group) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;\n\n    this.id = id;\n    this.container = container;\n    this.group = group;\n    this.fill = true;\n    this.close = true;\n    this.lastPathTime = 0;\n    this.destroyed = false;\n    this.unbreakable = false;\n    this.splitCount = 0;\n    this.misplaced = false;\n    this.loops = {\n      opacity: 0,\n      size: 0\n    };\n    this.maxDistance = {};\n    const pxRatio = container.retina.pixelRatio;\n    const options = container.actualOptions;\n    const particlesOptions = new ParticlesOptions_1.ParticlesOptions();\n    particlesOptions.load(options.particles);\n    const shapeType = particlesOptions.shape.type;\n    const reduceDuplicates = particlesOptions.reduceDuplicates;\n    this.shape = shapeType instanceof Array ? Utils_1.itemFromArray(shapeType, this.id, reduceDuplicates) : shapeType;\n\n    if (overrideOptions === null || overrideOptions === void 0 ? void 0 : overrideOptions.shape) {\n      if (overrideOptions.shape.type) {\n        const overrideShapeType = overrideOptions.shape.type;\n        this.shape = overrideShapeType instanceof Array ? Utils_1.itemFromArray(overrideShapeType, this.id, reduceDuplicates) : overrideShapeType;\n      }\n\n      const shapeOptions = new Shape_1.Shape();\n      shapeOptions.load(overrideOptions.shape);\n\n      if (this.shape) {\n        this.shapeData = this.loadShapeData(shapeOptions, reduceDuplicates);\n      }\n    } else {\n      this.shapeData = this.loadShapeData(particlesOptions.shape, reduceDuplicates);\n    }\n\n    if (overrideOptions !== undefined) {\n      particlesOptions.load(overrideOptions);\n    }\n\n    if (((_a = this.shapeData) === null || _a === void 0 ? void 0 : _a.particles) !== undefined) {\n      particlesOptions.load((_b = this.shapeData) === null || _b === void 0 ? void 0 : _b.particles);\n    }\n\n    this.fill = (_d = (_c = this.shapeData) === null || _c === void 0 ? void 0 : _c.fill) !== null && _d !== void 0 ? _d : this.fill;\n    this.close = (_f = (_e = this.shapeData) === null || _e === void 0 ? void 0 : _e.close) !== null && _f !== void 0 ? _f : this.close;\n    this.options = particlesOptions;\n    const zIndexValue = Utils_1.getRangeValue(this.options.zIndex.value);\n    this.pathDelay = Utils_1.getValue(this.options.move.path.delay) * 1000;\n    this.wobbleDistance = 0;\n    container.retina.initParticle(this);\n    const color = this.options.color;\n    const sizeOptions = this.options.size;\n    const sizeValue = Utils_1.getValue(sizeOptions) * container.retina.pixelRatio;\n    this.size = {\n      value: sizeValue,\n      max: Utils_1.getRangeMax(sizeOptions.value) * pxRatio,\n      min: Utils_1.getRangeMin(sizeOptions.value) * pxRatio\n    };\n    const sizeAnimation = sizeOptions.animation;\n\n    if (sizeAnimation.enable) {\n      this.size.status = Enums_1.AnimationStatus.increasing;\n      const sizeRange = Utils_1.setRangeValue(sizeOptions.value, sizeAnimation.minimumValue * pxRatio);\n      this.size.min = Utils_1.getRangeMin(sizeRange);\n      this.size.max = Utils_1.getRangeMax(sizeRange);\n\n      switch (sizeAnimation.startValue) {\n        case Enums_1.StartValueType.min:\n          this.size.value = this.size.min;\n          this.size.status = Enums_1.AnimationStatus.increasing;\n          break;\n\n        case Enums_1.StartValueType.random:\n          this.size.value = Utils_1.randomInRange(this.size);\n          this.size.status = Math.random() >= 0.5 ? Enums_1.AnimationStatus.increasing : Enums_1.AnimationStatus.decreasing;\n          break;\n\n        case Enums_1.StartValueType.max:\n        default:\n          this.size.value = this.size.max;\n          this.size.status = Enums_1.AnimationStatus.decreasing;\n          break;\n      }\n\n      this.size.velocity = ((_g = this.sizeAnimationSpeed) !== null && _g !== void 0 ? _g : container.retina.sizeAnimationSpeed) / 100 * container.retina.reduceFactor;\n\n      if (!sizeAnimation.sync) {\n        this.size.velocity *= Math.random();\n      }\n    }\n\n    this.direction = Utils_1.getParticleDirectionAngle(this.options.move.direction);\n    this.bubble = {\n      inRange: false\n    };\n    this.initialVelocity = this.calculateVelocity();\n    this.velocity = this.initialVelocity.copy();\n    const rotateOptions = this.options.rotate;\n    this.rotate = {\n      value: Utils_1.getRangeValue(rotateOptions.value) * Math.PI / 180\n    };\n    let rotateDirection = rotateOptions.direction;\n\n    if (rotateDirection === Enums_1.RotateDirection.random) {\n      const index = Math.floor(Math.random() * 2);\n      rotateDirection = index > 0 ? Enums_1.RotateDirection.counterClockwise : Enums_1.RotateDirection.clockwise;\n    }\n\n    switch (rotateDirection) {\n      case Enums_1.RotateDirection.counterClockwise:\n      case \"counterClockwise\":\n        this.rotate.status = Enums_1.AnimationStatus.decreasing;\n        break;\n\n      case Enums_1.RotateDirection.clockwise:\n        this.rotate.status = Enums_1.AnimationStatus.increasing;\n        break;\n    }\n\n    const rotateAnimation = this.options.rotate.animation;\n\n    if (rotateAnimation.enable) {\n      this.rotate.velocity = rotateAnimation.speed / 360 * container.retina.reduceFactor;\n\n      if (!rotateAnimation.sync) {\n        this.rotate.velocity *= Math.random();\n      }\n    }\n\n    const tiltOptions = this.options.tilt;\n    this.tilt = {\n      value: Utils_1.getRangeValue(tiltOptions.value) * Math.PI / 180,\n      sinDirection: Math.random() >= 0.5 ? 1 : -1,\n      cosDirection: Math.random() >= 0.5 ? 1 : -1\n    };\n    let tiltDirection = tiltOptions.direction;\n\n    if (tiltDirection === Enums_1.TiltDirection.random) {\n      const index = Math.floor(Math.random() * 2);\n      tiltDirection = index > 0 ? Enums_1.TiltDirection.counterClockwise : Enums_1.TiltDirection.clockwise;\n    }\n\n    switch (tiltDirection) {\n      case Enums_1.TiltDirection.counterClockwise:\n      case \"counterClockwise\":\n        this.tilt.status = Enums_1.AnimationStatus.decreasing;\n        break;\n\n      case Enums_1.TiltDirection.clockwise:\n        this.tilt.status = Enums_1.AnimationStatus.increasing;\n        break;\n    }\n\n    const tiltAnimation = this.options.tilt.animation;\n\n    if (tiltAnimation.enable) {\n      this.tilt.velocity = tiltAnimation.speed / 360 * container.retina.reduceFactor;\n\n      if (!tiltAnimation.sync) {\n        this.tilt.velocity *= Math.random();\n      }\n    }\n\n    const orbitOptions = particlesOptions.orbit;\n\n    if (orbitOptions.enable) {\n      this.orbitRotation = Utils_1.getRangeValue(orbitOptions.rotation.value);\n      this.orbitColor = Utils_1.colorToHsl(orbitOptions.color);\n    }\n\n    const hslColor = Utils_1.colorToHsl(color, this.id, reduceDuplicates);\n\n    if (hslColor) {\n      this.color = {\n        h: {\n          value: hslColor.h\n        },\n        s: {\n          value: hslColor.s\n        },\n        l: {\n          value: hslColor.l\n        }\n      };\n      const colorAnimation = this.options.color.animation;\n      this.setColorAnimation(colorAnimation.h, this.color.h);\n      this.setColorAnimation(colorAnimation.s, this.color.s);\n      this.setColorAnimation(colorAnimation.l, this.color.l);\n    }\n\n    const rollOpt = this.options.roll;\n\n    if (rollOpt.enable) {\n      if (this.color) {\n        if (rollOpt.backColor) {\n          this.backColor = Utils_1.colorToHsl(rollOpt.backColor);\n        } else if (rollOpt.darken.enable && rollOpt.enlighten.enable) {\n          this.alterType = Math.random() >= 0.5 ? Enums_1.AlterType.darken : Enums_1.AlterType.enlighten;\n          this.alterValue = this.alterType === Enums_1.AlterType.darken ? rollOpt.darken.value : rollOpt.enlighten.value;\n        } else if (rollOpt.darken.enable) {\n          this.alterType = Enums_1.AlterType.darken;\n          this.alterValue = rollOpt.darken.value;\n        } else if (rollOpt.enlighten.enable) {\n          this.alterType = Enums_1.AlterType.enlighten;\n          this.alterValue = rollOpt.enlighten.value;\n        }\n      }\n\n      this.rollAngle = Math.random() * Math.PI * 2;\n      this.rollSpeed = Utils_1.getRangeValue(rollOpt.speed) / 360;\n    } else {\n      this.rollAngle = 0;\n      this.rollSpeed = 0;\n    }\n\n    const wobbleOpt = this.options.wobble;\n\n    if (wobbleOpt.enable) {\n      this.wobbleAngle = Math.random() * Math.PI * 2;\n      this.wobbleSpeed = Utils_1.getRangeValue(wobbleOpt.speed) / 360;\n    } else {\n      this.wobbleAngle = 0;\n      this.wobbleSpeed = 0;\n    }\n\n    this.position = this.calcPosition(container, position, Utils_1.clamp(zIndexValue, 0, container.zLayers));\n    this.initialPosition = this.position.copy();\n    this.offset = Vector_1.Vector.origin;\n    const particles = container.particles;\n    particles.needsSort = particles.needsSort || particles.lastZIndex < this.position.z;\n    particles.lastZIndex = this.position.z;\n    this.zIndexFactor = this.position.z / container.zLayers;\n    const opacityOptions = this.options.opacity;\n    this.opacity = {\n      max: Utils_1.getRangeMax(opacityOptions.value),\n      min: Utils_1.getRangeMin(opacityOptions.value),\n      value: Utils_1.getValue(opacityOptions)\n    };\n    const opacityAnimation = opacityOptions.animation;\n\n    if (opacityAnimation.enable) {\n      this.opacity.status = Enums_1.AnimationStatus.increasing;\n      const opacityRange = Utils_1.setRangeValue(opacityOptions.value, opacityAnimation.minimumValue);\n      this.opacity.min = Utils_1.getRangeMin(opacityRange);\n      this.opacity.max = Utils_1.getRangeMax(opacityRange);\n\n      switch (opacityAnimation.startValue) {\n        case Enums_1.StartValueType.min:\n          this.opacity.value = this.opacity.min;\n          this.opacity.status = Enums_1.AnimationStatus.increasing;\n          break;\n\n        case Enums_1.StartValueType.random:\n          this.opacity.value = Utils_1.randomInRange(this.opacity);\n          this.opacity.status = Math.random() >= 0.5 ? Enums_1.AnimationStatus.increasing : Enums_1.AnimationStatus.decreasing;\n          break;\n\n        case Enums_1.StartValueType.max:\n        default:\n          this.opacity.value = this.opacity.max;\n          this.opacity.status = Enums_1.AnimationStatus.decreasing;\n          break;\n      }\n\n      this.opacity.velocity = opacityAnimation.speed / 100 * container.retina.reduceFactor;\n\n      if (!opacityAnimation.sync) {\n        this.opacity.velocity *= Math.random();\n      }\n    }\n\n    this.sides = 24;\n    let drawer = container.drawers.get(this.shape);\n\n    if (!drawer) {\n      drawer = Utils_1.Plugins.getShapeDrawer(this.shape);\n\n      if (drawer) {\n        container.drawers.set(this.shape, drawer);\n      }\n    }\n\n    if (drawer === null || drawer === void 0 ? void 0 : drawer.loadShape) {\n      drawer === null || drawer === void 0 ? void 0 : drawer.loadShape(this);\n    }\n\n    const sideCountFunc = drawer === null || drawer === void 0 ? void 0 : drawer.getSidesCount;\n\n    if (sideCountFunc) {\n      this.sides = sideCountFunc(this);\n    }\n\n    this.stroke = this.options.stroke instanceof Array ? Utils_1.itemFromArray(this.options.stroke, this.id, reduceDuplicates) : this.options.stroke;\n    this.strokeWidth = this.stroke.width * container.retina.pixelRatio;\n    const strokeHslColor = (_h = Utils_1.colorToHsl(this.stroke.color)) !== null && _h !== void 0 ? _h : this.getFillColor();\n\n    if (strokeHslColor) {\n      this.strokeColor = {\n        h: {\n          value: strokeHslColor.h\n        },\n        s: {\n          value: strokeHslColor.s\n        },\n        l: {\n          value: strokeHslColor.l\n        }\n      };\n      const strokeColorAnimation = (_j = this.stroke.color) === null || _j === void 0 ? void 0 : _j.animation;\n\n      if (strokeColorAnimation && this.strokeColor) {\n        this.setColorAnimation(strokeColorAnimation.h, this.strokeColor.h);\n        this.setColorAnimation(strokeColorAnimation.s, this.strokeColor.s);\n        this.setColorAnimation(strokeColorAnimation.l, this.strokeColor.l);\n      }\n    }\n\n    this.life = this.loadLife();\n    this.spawning = this.life.delay > 0;\n\n    if (this.options.move.spin.enable) {\n      const spinPos = (_k = this.options.move.spin.position) !== null && _k !== void 0 ? _k : {\n        x: 50,\n        y: 50\n      };\n      const spinCenter = {\n        x: spinPos.x / 100 * container.canvas.size.width,\n        y: spinPos.y / 100 * container.canvas.size.height\n      };\n      const pos = this.getPosition();\n      const distance = Utils_1.getDistance(pos, spinCenter);\n      this.spin = {\n        center: spinCenter,\n        direction: this.velocity.x >= 0 ? Enums_1.RotateDirection.clockwise : Enums_1.RotateDirection.counterClockwise,\n        angle: this.velocity.angle,\n        radius: distance,\n        acceleration: Utils_1.getRangeValue(this.options.move.spin.acceleration)\n      };\n    }\n\n    this.shadowColor = Utils_1.colorToRgb(this.options.shadow.color);\n\n    if (drawer && drawer.particleInit) {\n      drawer.particleInit(container, this);\n    }\n\n    for (const [, plugin] of container.plugins) {\n      if (plugin.particleCreated) {\n        plugin.particleCreated(this);\n      }\n    }\n  }\n\n  draw(delta) {\n    const container = this.container;\n\n    for (const [, plugin] of container.plugins) {\n      container.canvas.drawParticlePlugin(plugin, this, delta);\n    }\n\n    container.canvas.drawParticle(this, delta);\n  }\n\n  getPosition() {\n    return {\n      x: this.position.x + this.offset.x,\n      y: this.position.y + this.offset.y,\n      z: this.position.z\n    };\n  }\n\n  getRadius() {\n    return this.bubble.radius || this.size.value;\n  }\n\n  getMass() {\n    const radius = this.getRadius();\n    return Math.pow(radius, 2) * Math.PI / 2;\n  }\n\n  getFillColor() {\n    if (this.bubble.color) {\n      return this.bubble.color;\n    }\n\n    const color = Utils_1.getHslFromAnimation(this.color);\n\n    if (color && (this.backColor || this.alterType && this.alterValue !== undefined)) {\n      const rolled = Math.floor(this.rollAngle / (Math.PI / 2)) % 2;\n\n      if (rolled) {\n        if (this.backColor) {\n          return this.backColor;\n        } else if (this.alterType && this.alterValue !== undefined) {\n          return {\n            h: color.h,\n            s: color.s,\n            l: color.l + (this.alterType === Enums_1.AlterType.darken ? -1 : 1) * this.alterValue\n          };\n        }\n      }\n    }\n\n    return color;\n  }\n\n  getStrokeColor() {\n    var _a, _b;\n\n    return (_b = (_a = this.bubble.color) !== null && _a !== void 0 ? _a : Utils_1.getHslFromAnimation(this.strokeColor)) !== null && _b !== void 0 ? _b : this.getFillColor();\n  }\n\n  destroy(override) {\n    this.destroyed = true;\n    this.bubble.inRange = false;\n\n    if (this.unbreakable) {\n      return;\n    }\n\n    this.destroyed = true;\n    this.bubble.inRange = false;\n\n    for (const [, plugin] of this.container.plugins) {\n      if (plugin.particleDestroyed) {\n        plugin.particleDestroyed(this, override);\n      }\n    }\n\n    if (override) {\n      return;\n    }\n\n    const destroyOptions = this.options.destroy;\n\n    if (destroyOptions.mode === Enums_1.DestroyMode.split) {\n      this.split();\n    }\n  }\n\n  reset() {\n    this.loops.opacity = 0;\n    this.loops.size = 0;\n  }\n\n  split() {\n    const splitOptions = this.options.destroy.split;\n\n    if (splitOptions.count >= 0 && this.splitCount++ > splitOptions.count) {\n      return;\n    }\n\n    const rate = Utils_1.getRangeValue(splitOptions.rate.value);\n\n    for (let i = 0; i < rate; i++) {\n      this.container.particles.addSplitParticle(this);\n    }\n  }\n\n  setColorAnimation(colorAnimation, colorValue) {\n    if (colorAnimation.enable) {\n      colorValue.velocity = colorAnimation.speed / 100 * this.container.retina.reduceFactor;\n\n      if (colorAnimation.sync) {\n        return;\n      }\n\n      colorValue.status = Enums_1.AnimationStatus.increasing;\n      colorValue.velocity *= Math.random();\n\n      if (colorValue.value) {\n        colorValue.value *= Math.random();\n      }\n    } else {\n      colorValue.velocity = 0;\n    }\n  }\n\n  calcPosition(container, position, zIndex, tryCount = 0) {\n    var _a, _b;\n\n    for (const [, plugin] of container.plugins) {\n      const pluginPos = plugin.particlePosition !== undefined ? plugin.particlePosition(position, this) : undefined;\n\n      if (pluginPos !== undefined) {\n        return Vector3d_1.Vector3d.create(pluginPos.x, pluginPos.y, zIndex);\n      }\n    }\n\n    const canvasSize = container.canvas.size;\n    const pos = Vector3d_1.Vector3d.create((_a = position === null || position === void 0 ? void 0 : position.x) !== null && _a !== void 0 ? _a : Math.random() * canvasSize.width, (_b = position === null || position === void 0 ? void 0 : position.y) !== null && _b !== void 0 ? _b : Math.random() * canvasSize.height, zIndex);\n    const outMode = this.options.move.outMode;\n\n    if (Utils_1.isInArray(outMode, Enums_1.OutMode.bounce) || Utils_1.isInArray(outMode, Enums_1.OutMode.bounceHorizontal)) {\n      if (pos.x > container.canvas.size.width - this.size.value * 2) {\n        pos.x -= this.size.value;\n      } else if (pos.x < this.size.value * 2) {\n        pos.x += this.size.value;\n      }\n    }\n\n    if (Utils_1.isInArray(outMode, Enums_1.OutMode.bounce) || Utils_1.isInArray(outMode, Enums_1.OutMode.bounceVertical)) {\n      if (pos.y > container.canvas.size.height - this.size.value * 2) {\n        pos.y -= this.size.value;\n      } else if (pos.y < this.size.value * 2) {\n        pos.y += this.size.value;\n      }\n    }\n\n    if (this.checkOverlap(pos, tryCount)) {\n      return this.calcPosition(container, undefined, zIndex, tryCount + 1);\n    }\n\n    return pos;\n  }\n\n  checkOverlap(pos, tryCount = 0) {\n    const overlapOptions = this.options.collisions.overlap;\n\n    if (!overlapOptions.enable) {\n      const retries = overlapOptions.retries;\n\n      if (retries >= 0 && tryCount > retries) {\n        throw new Error(\"Particle is overlapping and can't be placed\");\n      }\n\n      let overlaps = false;\n\n      for (const particle of this.container.particles.array) {\n        if (Utils_1.getDistance(pos, particle.position) < this.size.value + particle.size.value) {\n          overlaps = true;\n          break;\n        }\n      }\n\n      return overlaps;\n    }\n\n    return false;\n  }\n\n  calculateVelocity() {\n    const baseVelocity = Utils_1.getParticleBaseVelocity(this.direction);\n    const res = baseVelocity.copy();\n    const moveOptions = this.options.move;\n    const rad = Math.PI / 180 * moveOptions.angle.value;\n    const radOffset = Math.PI / 180 * moveOptions.angle.offset;\n    const range = {\n      left: radOffset - rad / 2,\n      right: radOffset + rad / 2\n    };\n\n    if (!moveOptions.straight) {\n      res.angle += Utils_1.randomInRange(Utils_1.setRangeValue(range.left, range.right));\n    }\n\n    if (moveOptions.random && typeof moveOptions.speed === \"number\") {\n      res.length *= Math.random();\n    }\n\n    return res;\n  }\n\n  loadShapeData(shapeOptions, reduceDuplicates) {\n    const shapeData = shapeOptions.options[this.shape];\n\n    if (shapeData) {\n      return Utils_1.deepExtend({}, shapeData instanceof Array ? Utils_1.itemFromArray(shapeData, this.id, reduceDuplicates) : shapeData);\n    }\n  }\n\n  loadLife() {\n    const container = this.container;\n    const particlesOptions = this.options;\n    const lifeOptions = particlesOptions.life;\n    const life = {\n      delay: container.retina.reduceFactor ? Utils_1.getRangeValue(lifeOptions.delay.value) * (lifeOptions.delay.sync ? 1 : Math.random()) / container.retina.reduceFactor * 1000 : 0,\n      delayTime: 0,\n      duration: container.retina.reduceFactor ? Utils_1.getRangeValue(lifeOptions.duration.value) * (lifeOptions.duration.sync ? 1 : Math.random()) / container.retina.reduceFactor * 1000 : 0,\n      time: 0,\n      count: particlesOptions.life.count\n    };\n\n    if (life.duration <= 0) {\n      life.duration = -1;\n    }\n\n    if (life.count <= 0) {\n      life.count = -1;\n    }\n\n    return life;\n  }\n\n}\n\nexports.Particle = Particle;","map":null,"metadata":{},"sourceType":"script"}