{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Collider = void 0;\n\nvar Utils_1 = require(\"../../../../Utils\");\n\nvar Enums_1 = require(\"../../../../Enums\");\n\nvar Collider = function () {\n  function Collider() {}\n\n  Collider.collide = function (p1, container, _delta) {\n    var pos1 = p1.getPosition();\n    var query = container.particles.quadTree.query(new Utils_1.Circle(pos1.x, pos1.y, p1.size.value * 2));\n\n    for (var _i = 0, query_1 = query; _i < query_1.length; _i++) {\n      var p2 = query_1[_i];\n\n      if (p1 === p2 || !p2.particlesOptions.collisions.enable || p1.particlesOptions.collisions.mode !== p2.particlesOptions.collisions.mode) {\n        continue;\n      }\n\n      var pos2 = p2.getPosition();\n      var dist = Utils_1.Utils.getDistance(pos1, pos2);\n      var defaultSize = container.retina.sizeValue;\n      var radius1 = this.getRadius(p1, defaultSize);\n      var radius2 = this.getRadius(p2, defaultSize);\n      var distP = radius1 + radius2;\n\n      if (dist <= distP) {\n        this.resolveCollision(p1, p2);\n      }\n    }\n  };\n\n  Collider.getRadius = function (particle, fallback) {\n    return particle.bubble.radius || particle.size.value || fallback;\n  };\n\n  Collider.resolveCollision = function (p1, p2) {\n    var pos1 = p1.getPosition();\n    var pos2 = p2.getPosition();\n\n    switch (p1.particlesOptions.collisions.mode) {\n      case Enums_1.CollisionMode.bounce:\n        {\n          var xVelocityDiff = p1.velocity.horizontal - p2.velocity.horizontal;\n          var yVelocityDiff = p1.velocity.vertical - p2.velocity.vertical;\n          var xDist = pos2.x - pos1.x;\n          var yDist = pos2.y - pos1.y;\n\n          if (xVelocityDiff * xDist + yVelocityDiff * yDist >= 0) {\n            var angle = -Math.atan2(pos2.y - pos1.y, pos2.x - pos1.x);\n            var m1 = p1.size.value;\n            var m2 = p2.size.value;\n            var u1 = this.rotate(p1.velocity, angle);\n            var u2 = this.rotate(p2.velocity, angle);\n            var v1 = {\n              horizontal: u1.horizontal * (m1 - m2) / (m1 + m2) + u2.horizontal * 2 * m2 / (m1 + m2),\n              vertical: u1.vertical\n            };\n            var v2 = {\n              horizontal: u2.horizontal * (m1 - m2) / (m1 + m2) + u1.horizontal * 2 * m2 / (m1 + m2),\n              vertical: u2.vertical\n            };\n            var vFinal1 = this.rotate(v1, -angle);\n            var vFinal2 = this.rotate(v2, -angle);\n            p1.velocity.horizontal = vFinal1.horizontal;\n            p1.velocity.vertical = vFinal1.vertical;\n            p2.velocity.horizontal = vFinal2.horizontal;\n            p2.velocity.vertical = vFinal2.vertical;\n          }\n        }\n    }\n  };\n\n  Collider.rotate = function (velocity, angle) {\n    return {\n      horizontal: velocity.horizontal * Math.cos(angle) - velocity.vertical * Math.sin(angle),\n      vertical: velocity.horizontal * Math.sin(angle) + velocity.vertical * Math.cos(angle)\n    };\n  };\n\n  return Collider;\n}();\n\nexports.Collider = Collider;","map":null,"metadata":{},"sourceType":"script"}