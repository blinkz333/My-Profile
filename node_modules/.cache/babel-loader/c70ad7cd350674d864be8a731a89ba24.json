{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Mover = void 0;\n\nvar Utils_1 = require(\"../../Utils\");\n\nvar Enums_1 = require(\"../../Enums\");\n\nvar Mover = function () {\n  function Mover(container, particle) {\n    this.container = container;\n    this.particle = particle;\n  }\n\n  Mover.calcNoiseValue = function (input, size, noiseValue) {\n    return Math.floor(input / size) / noiseValue.value + noiseValue.offset;\n  };\n\n  Mover.prototype.move = function (delta) {\n    var _a;\n\n    var container = this.container;\n    var options = container.options;\n    var particle = this.particle;\n    var particlesOptions = particle.particlesOptions;\n\n    if (particlesOptions.move.enable) {\n      var slowFactor = this.getProximitySpeedFactor();\n      var deltaFactor = options.fpsLimit > 0 ? 60 * delta / 1000 : 3.6;\n      var baseSpeed = (_a = particle.moveSpeed) !== null && _a !== void 0 ? _a : container.retina.moveSpeed;\n      var moveSpeed = baseSpeed / 2 * slowFactor * deltaFactor;\n      var noiseOptions = particlesOptions.move.noise;\n      var noiseEnabled = noiseOptions.enable;\n\n      if (noiseEnabled) {\n        if (particle.lastNoiseTime > particle.noiseDelay) {\n          var position = particle.position;\n          var noiseFactor = noiseOptions.factor;\n          var simplex = container.simplex;\n          var noise = {\n            angle: simplex.noise3D(Mover.calcNoiseValue(position.x, particle.size.value, noiseFactor.horizontal), Mover.calcNoiseValue(position.y, particle.size.value, noiseFactor.horizontal), container.particles.noiseZ),\n            length: simplex.noise3D(Mover.calcNoiseValue(position.x, particle.size.value, noiseFactor.vertical), Mover.calcNoiseValue(position.y, particle.size.value, noiseFactor.vertical), container.particles.noiseZ)\n          };\n          particle.velocity.horizontal += Math.cos(noise.angle) * noise.length;\n          particle.velocity.horizontal = Utils_1.Utils.clamp(particle.velocity.horizontal, -1, 1);\n          particle.velocity.vertical += Math.sin(noise.angle) * noise.length;\n          particle.velocity.vertical = Utils_1.Utils.clamp(particle.velocity.vertical, -1, 1);\n          particle.lastNoiseTime -= particle.noiseDelay;\n        } else {\n          particle.lastNoiseTime += delta;\n        }\n      }\n\n      particle.position.x += particle.velocity.horizontal * moveSpeed;\n      particle.position.y += particle.velocity.vertical * moveSpeed;\n\n      if (particlesOptions.move.vibrate) {\n        particle.position.x += Math.sin(particle.position.x * Math.cos(particle.position.y));\n        particle.position.y += Math.cos(particle.position.y * Math.sin(particle.position.x));\n      }\n    }\n\n    this.moveParallax(delta);\n  };\n\n  Mover.prototype.moveParallax = function (_delta) {\n    var container = this.container;\n    var options = container.options;\n\n    if (!options.interactivity.events.onHover.parallax.enable) {\n      return;\n    }\n\n    var particle = this.particle;\n    var parallaxForce = options.interactivity.events.onHover.parallax.force;\n    var mousePos = container.interactivity.mouse.position;\n\n    if (!mousePos) {\n      return;\n    }\n\n    var windowDimension = {\n      height: window.innerHeight / 2,\n      width: window.innerWidth / 2\n    };\n    var parallaxSmooth = options.interactivity.events.onHover.parallax.smooth;\n    var tmp = {\n      x: (mousePos.x - windowDimension.width) * (particle.size.value / parallaxForce),\n      y: (mousePos.y - windowDimension.height) * (particle.size.value / parallaxForce)\n    };\n    particle.offset.x += (tmp.x - particle.offset.x) / parallaxSmooth;\n    particle.offset.y += (tmp.y - particle.offset.y) / parallaxSmooth;\n  };\n\n  Mover.prototype.getProximitySpeedFactor = function () {\n    var container = this.container;\n    var options = container.options;\n    var particle = this.particle;\n    var active = Utils_1.Utils.isInArray(Enums_1.HoverMode.slow, options.interactivity.events.onHover.mode);\n\n    if (!active) {\n      return 1;\n    }\n\n    var mousePos = this.container.interactivity.mouse.position;\n\n    if (!mousePos) {\n      return 1;\n    }\n\n    var particlePos = particle.getPosition();\n    var dist = Utils_1.Utils.getDistance(mousePos, particlePos);\n    var radius = container.retina.slowModeRadius;\n\n    if (dist > radius) {\n      return 1;\n    }\n\n    var proximityFactor = dist / radius || 0;\n    var slowFactor = options.interactivity.modes.slow.factor;\n    return proximityFactor / slowFactor;\n  };\n\n  return Mover;\n}();\n\nexports.Mover = Mover;","map":null,"metadata":{},"sourceType":"script"}