{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.QuadTree = void 0;\n\nvar Rectangle_1 = require(\"./Rectangle\");\n\nvar QuadTree = function () {\n  function QuadTree(rectangle, capacity) {\n    this.rectangle = rectangle;\n    this.capacity = capacity;\n    this.points = [];\n    this.divided = false;\n  }\n\n  QuadTree.prototype.subdivide = function () {\n    var x = this.rectangle.position.x;\n    var y = this.rectangle.position.y;\n    var w = this.rectangle.size.width;\n    var h = this.rectangle.size.height;\n    var capacity = this.capacity;\n    this.northEast = new QuadTree(new Rectangle_1.Rectangle(x, y, w / 2, h / 2), capacity);\n    this.northWest = new QuadTree(new Rectangle_1.Rectangle(x + w / 2, y, w / 2, h / 2), capacity);\n    this.southEast = new QuadTree(new Rectangle_1.Rectangle(x, y + h / 2, w / 2, h / 2), capacity);\n    this.southWest = new QuadTree(new Rectangle_1.Rectangle(x + w / 2, y + h / 2, w / 2, h / 2), capacity);\n    this.divided = true;\n  };\n\n  QuadTree.prototype.insert = function (point) {\n    var _a, _b, _c, _d, _e;\n\n    if (!this.rectangle.contains(point.position)) {\n      return false;\n    }\n\n    if (this.points.length < this.capacity) {\n      this.points.push(point);\n      return true;\n    } else {\n      if (!this.divided) {\n        this.subdivide();\n      }\n    }\n\n    return (_e = ((_a = this.northEast) === null || _a === void 0 ? void 0 : _a.insert(point)) || ((_b = this.northWest) === null || _b === void 0 ? void 0 : _b.insert(point)) || ((_c = this.southEast) === null || _c === void 0 ? void 0 : _c.insert(point)) || ((_d = this.southWest) === null || _d === void 0 ? void 0 : _d.insert(point))) !== null && _e !== void 0 ? _e : false;\n  };\n\n  QuadTree.prototype.query = function (range, found) {\n    var _a, _b, _c, _d;\n\n    var res = found !== null && found !== void 0 ? found : [];\n\n    if (!range.intersects(this.rectangle)) {\n      return [];\n    } else {\n      for (var _i = 0, _e = this.points; _i < _e.length; _i++) {\n        var p = _e[_i];\n\n        if (range.contains(p.position)) {\n          res.push(p.particle);\n        }\n      }\n\n      if (this.divided) {\n        (_a = this.northEast) === null || _a === void 0 ? void 0 : _a.query(range, res);\n        (_b = this.northWest) === null || _b === void 0 ? void 0 : _b.query(range, res);\n        (_c = this.southEast) === null || _c === void 0 ? void 0 : _c.query(range, res);\n        (_d = this.southWest) === null || _d === void 0 ? void 0 : _d.query(range, res);\n      }\n    }\n\n    return res;\n  };\n\n  return QuadTree;\n}();\n\nexports.QuadTree = QuadTree;","map":null,"metadata":{},"sourceType":"script"}