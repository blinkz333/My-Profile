{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CircleWarp = void 0;\n\nvar Rectangle_1 = require(\"./Rectangle\");\n\nvar Circle_1 = require(\"./Circle\");\n\nvar CircleWarp = function (_super) {\n  __extends(CircleWarp, _super);\n\n  function CircleWarp(x, y, radius, canvasSize) {\n    var _this = _super.call(this, x, y, radius) || this;\n\n    _this.canvasSize = {\n      height: canvasSize.height,\n      width: canvasSize.width\n    };\n    return _this;\n  }\n\n  CircleWarp.prototype.contains = function (point) {\n    if (_super.prototype.contains.call(this, point)) {\n      return true;\n    }\n\n    var posNE = {\n      x: point.x - this.canvasSize.width,\n      y: point.y\n    };\n\n    if (_super.prototype.contains.call(this, posNE)) {\n      return true;\n    }\n\n    var posSE = {\n      x: point.x - this.canvasSize.width,\n      y: point.y - this.canvasSize.height\n    };\n\n    if (_super.prototype.contains.call(this, posSE)) {\n      return true;\n    }\n\n    var posSW = {\n      x: point.x,\n      y: point.y - this.canvasSize.height\n    };\n    return _super.prototype.contains.call(this, posSW);\n  };\n\n  CircleWarp.prototype.intersects = function (range) {\n    if (_super.prototype.intersects.call(this, range)) {\n      return true;\n    }\n\n    var rect = range;\n    var circle = range;\n    var newPos = {\n      x: range.position.x - this.canvasSize.width,\n      y: range.position.y - this.canvasSize.height\n    };\n\n    if (circle.radius !== undefined) {\n      var biggerCircle = new Circle_1.Circle(newPos.x, newPos.y, circle.radius * 2);\n      return _super.prototype.intersects.call(this, biggerCircle);\n    } else if (rect.size !== undefined) {\n      var rectSW = new Rectangle_1.Rectangle(newPos.x, newPos.y, rect.size.width * 2, rect.size.height * 2);\n      return _super.prototype.intersects.call(this, rectSW);\n    }\n\n    return false;\n  };\n\n  return CircleWarp;\n}(Circle_1.Circle);\n\nexports.CircleWarp = CircleWarp;","map":null,"metadata":{},"sourceType":"script"}