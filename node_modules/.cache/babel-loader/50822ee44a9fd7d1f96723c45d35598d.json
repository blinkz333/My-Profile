{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Absorbers = void 0;\n\nconst AbsorberInstance_1 = require(\"./AbsorberInstance\");\n\nconst Absorber_1 = require(\"./Options/Classes/Absorber\");\n\nconst Enums_1 = require(\"./Enums\");\n\nconst Utils_1 = require(\"../../Utils\");\n\nclass Absorbers {\n  constructor(container) {\n    this.container = container;\n    this.array = [];\n    this.absorbers = [];\n    this.interactivityAbsorbers = [];\n    const overridableContainer = container;\n\n    overridableContainer.getAbsorber = idxOrName => idxOrName === undefined || typeof idxOrName === \"number\" ? this.array[idxOrName || 0] : this.array.find(t => t.name === idxOrName);\n\n    overridableContainer.addAbsorber = (options, position) => this.addAbsorber(options, position);\n  }\n\n  init(options) {\n    var _a, _b;\n\n    if (!options) {\n      return;\n    }\n\n    if (options.absorbers) {\n      if (options.absorbers instanceof Array) {\n        this.absorbers = options.absorbers.map(s => {\n          const tmp = new Absorber_1.Absorber();\n          tmp.load(s);\n          return tmp;\n        });\n      } else {\n        if (this.absorbers instanceof Array) {\n          this.absorbers = new Absorber_1.Absorber();\n        }\n\n        this.absorbers.load(options.absorbers);\n      }\n    }\n\n    const interactivityAbsorbers = (_b = (_a = options.interactivity) === null || _a === void 0 ? void 0 : _a.modes) === null || _b === void 0 ? void 0 : _b.absorbers;\n\n    if (interactivityAbsorbers) {\n      if (interactivityAbsorbers instanceof Array) {\n        this.interactivityAbsorbers = interactivityAbsorbers.map(s => {\n          const tmp = new Absorber_1.Absorber();\n          tmp.load(s);\n          return tmp;\n        });\n      } else {\n        if (this.interactivityAbsorbers instanceof Array) {\n          this.interactivityAbsorbers = new Absorber_1.Absorber();\n        }\n\n        this.interactivityAbsorbers.load(interactivityAbsorbers);\n      }\n    }\n\n    if (this.absorbers instanceof Array) {\n      for (const absorberOptions of this.absorbers) {\n        this.addAbsorber(absorberOptions);\n      }\n    } else {\n      this.addAbsorber(this.absorbers);\n    }\n  }\n\n  particleUpdate(particle) {\n    for (const absorber of this.array) {\n      absorber.attract(particle);\n\n      if (particle.destroyed) {\n        break;\n      }\n    }\n  }\n\n  draw(context) {\n    for (const absorber of this.array) {\n      context.save();\n      absorber.draw(context);\n      context.restore();\n    }\n  }\n\n  stop() {\n    this.array = [];\n  }\n\n  resize() {\n    for (const absorber of this.array) {\n      absorber.resize();\n    }\n  }\n\n  handleClickMode(mode) {\n    const container = this.container;\n    const absorberOptions = this.absorbers;\n    const modeAbsorbers = this.interactivityAbsorbers;\n\n    if (mode === Enums_1.AbsorberClickMode.absorber) {\n      let absorbersModeOptions;\n\n      if (modeAbsorbers instanceof Array) {\n        if (modeAbsorbers.length > 0) {\n          absorbersModeOptions = Utils_1.itemFromArray(modeAbsorbers);\n        }\n      } else {\n        absorbersModeOptions = modeAbsorbers;\n      }\n\n      const absorbersOptions = absorbersModeOptions !== null && absorbersModeOptions !== void 0 ? absorbersModeOptions : absorberOptions instanceof Array ? Utils_1.itemFromArray(absorberOptions) : absorberOptions;\n      const aPosition = container.interactivity.mouse.clickPosition;\n      this.addAbsorber(absorbersOptions, aPosition);\n    }\n  }\n\n  addAbsorber(options, position) {\n    const absorber = new AbsorberInstance_1.AbsorberInstance(this, this.container, options, position);\n    this.array.push(absorber);\n    return absorber;\n  }\n\n  removeAbsorber(absorber) {\n    const index = this.array.indexOf(absorber);\n\n    if (index >= 0) {\n      this.array.splice(index, 1);\n    }\n  }\n\n}\n\nexports.Absorbers = Absorbers;","map":null,"metadata":{},"sourceType":"script"}