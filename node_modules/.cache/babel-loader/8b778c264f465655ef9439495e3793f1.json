{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PolygonMaskInstance = void 0;\n\nvar Enums_1 = require(\"./Enums\");\n\nvar Utils_1 = require(\"../../Utils\");\n\nvar PolygonMask_1 = require(\"./Options/Classes/PolygonMask\");\n\nvar PolygonMaskInstance = function () {\n  function PolygonMaskInstance(container) {\n    this.container = container;\n    this.dimension = {\n      height: 0,\n      width: 0\n    };\n    this.path2DSupported = Object.prototype.hasOwnProperty.call(window, \"Path2D\");\n    this.options = new PolygonMask_1.PolygonMask();\n    this.polygonMaskMoveRadius = this.options.move.radius * container.retina.pixelRatio;\n  }\n\n  PolygonMaskInstance.polygonBounce = function (particle) {\n    particle.velocity.horizontal = -particle.velocity.horizontal + particle.velocity.vertical / 2;\n    particle.velocity.vertical = -particle.velocity.vertical + particle.velocity.horizontal / 2;\n  };\n\n  PolygonMaskInstance.drawPolygonMask = function (context, rawData, stroke) {\n    var color = Utils_1.ColorUtils.colorToRgb(stroke.color);\n\n    if (color) {\n      context.beginPath();\n      context.moveTo(rawData[0].x, rawData[0].y);\n\n      for (var i = 1; i < rawData.length; i++) {\n        context.lineTo(rawData[i].x, rawData[i].y);\n      }\n\n      context.closePath();\n      context.strokeStyle = Utils_1.ColorUtils.getStyleFromRgb(color);\n      context.lineWidth = stroke.width;\n      context.stroke();\n    }\n  };\n\n  PolygonMaskInstance.drawPolygonMaskPath = function (context, path, stroke, position) {\n    context.translate(position.x, position.y);\n    var color = Utils_1.ColorUtils.colorToRgb(stroke.color);\n\n    if (color) {\n      context.strokeStyle = Utils_1.ColorUtils.getStyleFromRgb(color, stroke.opacity);\n      context.lineWidth = stroke.width;\n      context.stroke(path);\n    }\n  };\n\n  PolygonMaskInstance.prototype.initAsync = function (options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var polygonMaskOptions;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.options.load(options === null || options === void 0 ? void 0 : options.polygon);\n            polygonMaskOptions = this.options;\n            this.polygonMaskMoveRadius = polygonMaskOptions.move.radius * this.container.retina.pixelRatio;\n            if (!polygonMaskOptions.enable) return [3, 2];\n            return [4, this.initRawData()];\n\n          case 1:\n            _a.sent();\n\n            _a.label = 2;\n\n          case 2:\n            return [2];\n        }\n      });\n    });\n  };\n\n  PolygonMaskInstance.prototype.checkInsidePolygon = function (position) {\n    var container = this.container;\n    var polygonMaskOptions = this.options;\n\n    if (!polygonMaskOptions.enable || polygonMaskOptions.type === Enums_1.Type.none || polygonMaskOptions.type === Enums_1.Type.inline) {\n      return true;\n    }\n\n    if (!this.raw) {\n      throw new Error(Utils_1.Constants.noPolygonFound);\n    }\n\n    var x = position ? position.x : Math.random() * container.canvas.size.width;\n    var y = position ? position.y : Math.random() * container.canvas.size.height;\n    var inside = false;\n\n    for (var i = 0, j = this.raw.length - 1; i < this.raw.length; j = i++) {\n      var xi = this.raw[i].x;\n      var yi = this.raw[i].y;\n      var xj = this.raw[j].x;\n      var yj = this.raw[j].y;\n      var intersect = yi > y !== yj > y && x < (xj - xi) * (y - yi) / (yj - yi) + xi;\n\n      if (intersect) {\n        inside = !inside;\n      }\n    }\n\n    if (polygonMaskOptions.type === Enums_1.Type.inside) {\n      return inside;\n    } else if (polygonMaskOptions.type === Enums_1.Type.outside) {\n      return !inside;\n    }\n\n    return false;\n  };\n\n  PolygonMaskInstance.prototype.resize = function () {\n    var _this = this;\n\n    var container = this.container;\n    var polygonMaskOptions = this.options;\n\n    if (polygonMaskOptions.enable && polygonMaskOptions.type !== Enums_1.Type.none) {\n      if (this.redrawTimeout) {\n        clearTimeout(this.redrawTimeout);\n      }\n\n      this.redrawTimeout = window.setTimeout(function () {\n        return __awaiter(_this, void 0, void 0, function () {\n          return __generator(this, function (_a) {\n            switch (_a.label) {\n              case 0:\n                return [4, this.initRawData()];\n\n              case 1:\n                _a.sent();\n\n                container.particles.redraw();\n                return [2];\n            }\n          });\n        });\n      }, 250);\n    }\n  };\n\n  PolygonMaskInstance.prototype.stop = function () {\n    delete this.raw;\n    delete this.paths;\n  };\n\n  PolygonMaskInstance.prototype.randomPointInPolygon = function () {\n    var container = this.container;\n    var polygonMaskOptions = this.options;\n    var position;\n\n    if (polygonMaskOptions.type === Enums_1.Type.inline) {\n      switch (polygonMaskOptions.inline.arrangement) {\n        case Enums_1.InlineArrangement.randomPoint:\n          position = this.getRandomPointOnPolygonPath();\n          break;\n\n        case Enums_1.InlineArrangement.randomLength:\n          position = this.getRandomPointOnPolygonPathByLength();\n          break;\n\n        case Enums_1.InlineArrangement.equidistant:\n          position = this.getEquidistantPointOnPolygonPathByIndex(container.particles.count);\n          break;\n\n        case Enums_1.InlineArrangement.onePerPoint:\n        case Enums_1.InlineArrangement.perPoint:\n        default:\n          position = this.getPointOnPolygonPathByIndex(container.particles.count);\n      }\n    } else {\n      position = {\n        x: Math.random() * container.canvas.size.width,\n        y: Math.random() * container.canvas.size.height\n      };\n    }\n\n    if (this.checkInsidePolygon(position)) {\n      return position;\n    } else {\n      return this.randomPointInPolygon();\n    }\n  };\n\n  PolygonMaskInstance.prototype.particlesInitialization = function () {\n    var polygonMaskOptions = this.options;\n\n    if (polygonMaskOptions.enable && polygonMaskOptions.type === Enums_1.Type.inline && (polygonMaskOptions.inline.arrangement === Enums_1.InlineArrangement.onePerPoint || polygonMaskOptions.inline.arrangement === Enums_1.InlineArrangement.perPoint)) {\n      this.drawPointsOnPolygonPath();\n      return true;\n    }\n\n    return false;\n  };\n\n  PolygonMaskInstance.prototype.particlePosition = function (position, particle) {\n    var _a, _b;\n\n    var polygonMaskOptions = this.options;\n\n    if (polygonMaskOptions.enable && ((_b = (_a = this.raw) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0) > 0) {\n      var pos = {\n        x: 0,\n        y: 0\n      };\n\n      if (position) {\n        pos.x = position.x;\n        pos.y = position.y;\n      } else {\n        var randomPoint = this.randomPointInPolygon();\n        pos.x = randomPoint.x;\n        pos.y = randomPoint.y;\n      }\n\n      if (polygonMaskOptions.type === Enums_1.Type.inline && particle) {\n        particle.initialPosition = {\n          x: pos.x,\n          y: pos.y\n        };\n      }\n\n      return pos;\n    }\n  };\n\n  PolygonMaskInstance.prototype.particleBounce = function (particle, _delta) {\n    var polygonMaskOptions = this.options;\n\n    if (polygonMaskOptions.enable && polygonMaskOptions.type !== Enums_1.Type.none && polygonMaskOptions.type !== Enums_1.Type.inline) {\n      if (!this.checkInsidePolygon(particle.getPosition())) {\n        PolygonMaskInstance.polygonBounce(particle);\n        return true;\n      }\n    } else if (polygonMaskOptions.enable && polygonMaskOptions.type === Enums_1.Type.inline) {\n      if (particle.initialPosition) {\n        var dist = Utils_1.Utils.getDistance(particle.initialPosition, particle.getPosition());\n\n        if (dist > this.polygonMaskMoveRadius) {\n          PolygonMaskInstance.polygonBounce(particle);\n          return true;\n        }\n      }\n    }\n\n    return false;\n  };\n\n  PolygonMaskInstance.prototype.clickPositionValid = function (position) {\n    var polygonMaskOptions = this.options;\n\n    if (polygonMaskOptions.enable && polygonMaskOptions.type !== Enums_1.Type.none && polygonMaskOptions.type !== Enums_1.Type.inline) {\n      if (this.checkInsidePolygon(position)) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  PolygonMaskInstance.prototype.downloadSvgPathToPolygon = function (svgUrl, force) {\n    return __awaiter(this, void 0, void 0, function () {\n      var polygonMaskOptions, url, forceDownload, req, _a;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            polygonMaskOptions = this.options;\n            url = svgUrl || polygonMaskOptions.url;\n            forceDownload = force !== null && force !== void 0 ? force : false;\n\n            if (!url || this.paths !== undefined && !forceDownload) {\n              return [2, this.raw];\n            }\n\n            return [4, fetch(url)];\n\n          case 1:\n            req = _b.sent();\n            if (!req.ok) return [3, 3];\n            _a = this.parseSvgPathToPolygon;\n            return [4, req.text()];\n\n          case 2:\n            return [2, _a.apply(this, [_b.sent()])];\n\n          case 3:\n            throw new Error(\"tsParticles Error - Error occurred during polygon mask download\");\n        }\n      });\n    });\n  };\n\n  PolygonMaskInstance.prototype.parseSvgPathToPolygon = function (xml, force) {\n    var _a;\n\n    var forceDownload = force !== null && force !== void 0 ? force : false;\n\n    if (this.paths !== undefined && !forceDownload) {\n      return this.raw;\n    }\n\n    var container = this.container;\n    var polygonMaskOptions = this.options;\n    var parser = new DOMParser();\n    var doc = parser.parseFromString(xml, \"image/svg+xml\");\n    var svg = doc.getElementsByTagName(\"svg\")[0];\n    var svgPaths = svg.getElementsByTagName(\"path\");\n\n    if (!svgPaths.length) {\n      svgPaths = doc.getElementsByTagName(\"path\");\n    }\n\n    this.paths = [];\n\n    for (var i = 0; i < svgPaths.length; i++) {\n      var path = svgPaths.item(i);\n\n      if (path) {\n        this.paths.push({\n          element: path,\n          length: path.getTotalLength()\n        });\n      }\n    }\n\n    var pxRatio = container.retina.pixelRatio;\n    var scale = polygonMaskOptions.scale / pxRatio;\n    this.dimension.width = parseFloat(svg.getAttribute(\"width\") || \"0\") * scale;\n    this.dimension.height = parseFloat(svg.getAttribute(\"height\") || \"0\") * scale;\n    var position = (_a = polygonMaskOptions.position) !== null && _a !== void 0 ? _a : {\n      x: 50,\n      y: 50\n    };\n    this.offset = {\n      x: container.canvas.size.width * position.x / (100 * pxRatio) - this.dimension.width / 2,\n      y: container.canvas.size.height * position.y / (100 * pxRatio) - this.dimension.height / 2\n    };\n    var polygonRaw = [];\n\n    for (var _i = 0, _b = this.paths; _i < _b.length; _i++) {\n      var path = _b[_i];\n      var segments = path.element.pathSegList;\n      var len = segments.numberOfItems;\n      var p = {\n        x: 0,\n        y: 0\n      };\n\n      for (var i = 0; i < len; i++) {\n        var segment = segments.getItem(i);\n\n        switch (segment.pathSegType) {\n          case window.SVGPathSeg.PATHSEG_MOVETO_ABS:\n          case window.SVGPathSeg.PATHSEG_LINETO_ABS:\n          case window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_ABS:\n          case window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_ABS:\n          case window.SVGPathSeg.PATHSEG_ARC_ABS:\n          case window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS:\n          case window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS:\n            {\n              var absSeg = segment;\n              p.x = absSeg.x;\n              p.y = absSeg.y;\n              break;\n            }\n\n          case window.SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_ABS:\n            p.x = segment.x;\n            break;\n\n          case window.SVGPathSeg.PATHSEG_LINETO_VERTICAL_ABS:\n            p.y = segment.y;\n            break;\n\n          case window.SVGPathSeg.PATHSEG_LINETO_REL:\n          case window.SVGPathSeg.PATHSEG_MOVETO_REL:\n          case window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_REL:\n          case window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_REL:\n          case window.SVGPathSeg.PATHSEG_ARC_REL:\n          case window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_REL:\n          case window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL:\n            {\n              var relSeg = segment;\n              p.x += relSeg.x;\n              p.y += relSeg.y;\n              break;\n            }\n\n          case window.SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_REL:\n            p.x += segment.x;\n            break;\n\n          case window.SVGPathSeg.PATHSEG_LINETO_VERTICAL_REL:\n            p.y += segment.y;\n            break;\n\n          case window.SVGPathSeg.PATHSEG_UNKNOWN:\n          case window.SVGPathSeg.PATHSEG_CLOSEPATH:\n            continue;\n        }\n\n        polygonRaw.push({\n          x: p.x * scale + this.offset.x,\n          y: p.y * scale + this.offset.y\n        });\n      }\n    }\n\n    return polygonRaw;\n  };\n\n  PolygonMaskInstance.prototype.draw = function (context) {\n    var _a;\n\n    if (!((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n      return;\n    }\n\n    var polygonMaskOptions = this.options;\n\n    if (polygonMaskOptions.enable && polygonMaskOptions.draw.enable) {\n      var polygonDraw = polygonMaskOptions.draw;\n      var rawData = this.raw;\n\n      for (var _i = 0, _b = this.paths; _i < _b.length; _i++) {\n        var path = _b[_i];\n        var path2d = path.path2d;\n        var path2dSupported = this.path2DSupported;\n\n        if (context) {\n          if (path2dSupported && path2d && this.offset) {\n            PolygonMaskInstance.drawPolygonMaskPath(context, path2d, polygonDraw.stroke, this.offset);\n          } else if (rawData) {\n            PolygonMaskInstance.drawPolygonMask(context, rawData, polygonDraw.stroke);\n          }\n        }\n      }\n    }\n  };\n\n  PolygonMaskInstance.prototype.drawPointsOnPolygonPath = function () {\n    var container = this.container;\n\n    if (this.raw) {\n      for (var _i = 0, _a = this.raw; _i < _a.length; _i++) {\n        var item = _a[_i];\n        container.particles.addParticle({\n          x: item.x,\n          y: item.y\n        });\n      }\n    }\n  };\n\n  PolygonMaskInstance.prototype.getRandomPointOnPolygonPath = function () {\n    if (!this.raw || !this.raw.length) throw new Error(Utils_1.Constants.noPolygonDataLoaded);\n    var coords = Utils_1.Utils.itemFromArray(this.raw);\n    return {\n      x: coords.x,\n      y: coords.y\n    };\n  };\n\n  PolygonMaskInstance.prototype.getRandomPointOnPolygonPathByLength = function () {\n    var _a, _b, _c;\n\n    var polygonMaskOptions = this.options;\n    if (!this.raw || !this.raw.length || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) throw new Error(Utils_1.Constants.noPolygonDataLoaded);\n    var path = Utils_1.Utils.itemFromArray(this.paths);\n    var distance = Math.floor(Math.random() * path.length) + 1;\n    var point = path.element.getPointAtLength(distance);\n    return {\n      x: point.x * polygonMaskOptions.scale + (((_b = this.offset) === null || _b === void 0 ? void 0 : _b.x) || 0),\n      y: point.y * polygonMaskOptions.scale + (((_c = this.offset) === null || _c === void 0 ? void 0 : _c.y) || 0)\n    };\n  };\n\n  PolygonMaskInstance.prototype.getEquidistantPointOnPolygonPathByIndex = function (index) {\n    var _a, _b, _c, _d, _e, _f, _g;\n\n    var container = this.container;\n    var options = container.options;\n    var polygonMaskOptions = this.options;\n    if (!this.raw || !this.raw.length || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) throw new Error(Utils_1.Constants.noPolygonDataLoaded);\n    var offset = 0;\n    var point;\n    var totalLength = this.paths.reduce(function (tot, path) {\n      return tot + path.length;\n    }, 0);\n    var distance = totalLength / options.particles.number.value;\n\n    for (var _i = 0, _h = this.paths; _i < _h.length; _i++) {\n      var path = _h[_i];\n      var pathDistance = distance * index - offset;\n\n      if (pathDistance <= path.length) {\n        point = path.element.getPointAtLength(pathDistance);\n        break;\n      } else {\n        offset += path.length;\n      }\n    }\n\n    return {\n      x: ((_b = point === null || point === void 0 ? void 0 : point.x) !== null && _b !== void 0 ? _b : 0) * polygonMaskOptions.scale + ((_d = (_c = this.offset) === null || _c === void 0 ? void 0 : _c.x) !== null && _d !== void 0 ? _d : 0),\n      y: ((_e = point === null || point === void 0 ? void 0 : point.y) !== null && _e !== void 0 ? _e : 0) * polygonMaskOptions.scale + ((_g = (_f = this.offset) === null || _f === void 0 ? void 0 : _f.y) !== null && _g !== void 0 ? _g : 0)\n    };\n  };\n\n  PolygonMaskInstance.prototype.getPointOnPolygonPathByIndex = function (index) {\n    if (!this.raw || !this.raw.length) throw new Error(Utils_1.Constants.noPolygonDataLoaded);\n    var coords = this.raw[index % this.raw.length];\n    return {\n      x: coords.x,\n      y: coords.y\n    };\n  };\n\n  PolygonMaskInstance.prototype.createPath2D = function () {\n    var _a, _b;\n\n    var polygonMaskOptions = this.options;\n\n    if (!this.path2DSupported || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n      return;\n    }\n\n    var _loop_1 = function (path) {\n      var pathData = (_b = path.element) === null || _b === void 0 ? void 0 : _b.getAttribute(\"d\");\n\n      if (pathData) {\n        var path2d = new Path2D(pathData);\n        var matrix = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\").createSVGMatrix();\n        var finalPath = new Path2D();\n        var transform = matrix.scale(polygonMaskOptions.scale);\n\n        if (finalPath.addPath) {\n          finalPath.addPath(path2d, transform);\n          path.path2d = finalPath;\n        } else {\n          delete path.path2d;\n        }\n      } else {\n        delete path.path2d;\n      }\n\n      if (!path.path2d && this_1.raw) {\n        path.path2d = new Path2D();\n        path.path2d.moveTo(this_1.raw[0].x, this_1.raw[0].y);\n        this_1.raw.forEach(function (pos, i) {\n          var _a;\n\n          if (i > 0) {\n            (_a = path.path2d) === null || _a === void 0 ? void 0 : _a.lineTo(pos.x, pos.y);\n          }\n        });\n        path.path2d.closePath();\n      }\n    };\n\n    var this_1 = this;\n\n    for (var _i = 0, _c = this.paths; _i < _c.length; _i++) {\n      var path = _c[_i];\n\n      _loop_1(path);\n    }\n  };\n\n  PolygonMaskInstance.prototype.initRawData = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var polygonMaskOptions, _a, data, svg, path;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            polygonMaskOptions = this.options;\n            if (!polygonMaskOptions.url) return [3, 2];\n            _a = this;\n            return [4, this.downloadSvgPathToPolygon(polygonMaskOptions.url)];\n\n          case 1:\n            _a.raw = _b.sent();\n            return [3, 3];\n\n          case 2:\n            if (polygonMaskOptions.data) {\n              data = polygonMaskOptions.data;\n              svg = void 0;\n\n              if (typeof data !== \"string\") {\n                path = data.path instanceof Array ? data.path.map(function (t) {\n                  return \"<path d=\\\"\" + t + \"\\\" />\";\n                }).join(\"\") : \"<path d=\\\"\" + data.path + \"\\\" />\";\n                svg = \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" width=\\\"\" + data.size.width + \"\\\" height=\\\"\" + data.size.height + \"\\\">\" + path + \"</svg>\";\n              } else {\n                svg = data;\n              }\n\n              this.raw = this.parseSvgPathToPolygon(svg);\n            }\n\n            _b.label = 3;\n\n          case 3:\n            this.createPath2D();\n            return [2];\n        }\n      });\n    });\n  };\n\n  return PolygonMaskInstance;\n}();\n\nexports.PolygonMaskInstance = PolygonMaskInstance;","map":null,"metadata":{},"sourceType":"script"}