{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TextDrawer = exports.validTypes = void 0;\n\nconst Utils_1 = require(\"../../Utils\");\n\nexports.validTypes = [\"text\", \"character\", \"char\"];\n\nclass TextDrawer {\n  getSidesCount() {\n    return 12;\n  }\n\n  init(container) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const options = container.actualOptions;\n\n      if (exports.validTypes.find(t => Utils_1.isInArray(t, options.particles.shape.type))) {\n        const shapeOptions = exports.validTypes.map(t => options.particles.shape.options[t]).find(t => !!t);\n\n        if (shapeOptions instanceof Array) {\n          const promises = [];\n\n          for (const character of shapeOptions) {\n            promises.push(Utils_1.loadFont(character));\n          }\n\n          yield Promise.allSettled(promises);\n        } else {\n          if (shapeOptions !== undefined) {\n            yield Utils_1.loadFont(shapeOptions);\n          }\n        }\n      }\n    });\n  }\n\n  draw(context, particle, radius, opacity) {\n    var _a, _b, _c;\n\n    const character = particle.shapeData;\n\n    if (character === undefined) {\n      return;\n    }\n\n    const textData = character.value;\n\n    if (textData === undefined) {\n      return;\n    }\n\n    const textParticle = particle;\n\n    if (textParticle.text === undefined) {\n      textParticle.text = textData instanceof Array ? Utils_1.itemFromArray(textData, particle.randomIndexData) : textData;\n    }\n\n    const text = textParticle.text;\n    const style = (_a = character.style) !== null && _a !== void 0 ? _a : \"\";\n    const weight = (_b = character.weight) !== null && _b !== void 0 ? _b : \"400\";\n    const size = Math.round(radius) * 2;\n    const font = (_c = character.font) !== null && _c !== void 0 ? _c : \"Verdana\";\n    const fill = particle.fill;\n    const offsetX = text.length * radius / 2;\n    context.font = `${style} ${weight} ${size}px \"${font}\"`;\n    const pos = {\n      x: -offsetX,\n      y: radius / 2\n    };\n    context.globalAlpha = opacity;\n\n    if (fill) {\n      context.fillText(text, pos.x, pos.y);\n    } else {\n      context.strokeText(text, pos.x, pos.y);\n    }\n\n    context.globalAlpha = 1;\n  }\n\n}\n\nexports.TextDrawer = TextDrawer;","map":null,"metadata":{},"sourceType":"script"}