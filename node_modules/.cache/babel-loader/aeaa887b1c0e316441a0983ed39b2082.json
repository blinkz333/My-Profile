{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.replaceColorSvg = exports.downloadSvgImage = exports.loadImage = void 0;\n\nconst Utils_1 = require(\"../../Utils\");\n\nfunction loadImage(source) {\n  return new Promise((resolve, reject) => {\n    if (!source) {\n      reject(\"Error tsParticles - No image.src\");\n      return;\n    }\n\n    const image = {\n      source: source,\n      type: source.substr(source.length - 3)\n    };\n    const img = new Image();\n    img.addEventListener(\"load\", () => {\n      image.element = img;\n      resolve(image);\n    });\n    img.addEventListener(\"error\", () => {\n      reject(`Error tsParticles - loading image: ${source}`);\n    });\n    img.src = source;\n  });\n}\n\nexports.loadImage = loadImage;\n\nfunction downloadSvgImage(source) {\n  return __awaiter(this, void 0, void 0, function* () {\n    if (!source) {\n      throw new Error(\"Error tsParticles - No image.src\");\n    }\n\n    const image = {\n      source: source,\n      type: source.substr(source.length - 3)\n    };\n\n    if (image.type !== \"svg\") {\n      return loadImage(source);\n    }\n\n    const response = yield fetch(image.source);\n\n    if (!response.ok) {\n      throw new Error(\"Error tsParticles - Image not found\");\n    }\n\n    image.svgData = yield response.text();\n    return image;\n  });\n}\n\nexports.downloadSvgImage = downloadSvgImage;\n\nfunction replaceColorSvg(imageShape, color, opacity) {\n  const {\n    svgData\n  } = imageShape;\n\n  if (!svgData) {\n    return \"\";\n  }\n\n  if (svgData.includes(\"fill\")) {\n    const currentColor = /(#(?:[0-9a-f]{2}){2,4}|(#[0-9a-f]{3})|(rgb|hsl)a?\\((-?\\d+%?[,\\s]+){2,3}\\s*[\\d.]+%?\\))|currentcolor/gi;\n    return svgData.replace(currentColor, () => Utils_1.getStyleFromHsl(color, opacity));\n  }\n\n  const preFillIndex = svgData.indexOf(\">\");\n  return `${svgData.substring(0, preFillIndex)} fill=\"${Utils_1.getStyleFromHsl(color, opacity)}\"${svgData.substring(preFillIndex)}`;\n}\n\nexports.replaceColorSvg = replaceColorSvg;","map":null,"metadata":{},"sourceType":"script"}