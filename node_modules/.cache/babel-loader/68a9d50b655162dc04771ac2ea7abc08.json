{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Particle = void 0;\n\nvar Updater_1 = require(\"./Particle/Updater\");\n\nvar Particles_1 = require(\"../Options/Classes/Particles/Particles\");\n\nvar Shape_1 = require(\"../Options/Classes/Particles/Shape/Shape\");\n\nvar Enums_1 = require(\"../Enums\");\n\nvar Utils_1 = require(\"../Utils\");\n\nvar Particle = function () {\n  function Particle(container, position, overrideOptions) {\n    var _this = this;\n\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s;\n\n    this.container = container;\n    this.fill = true;\n    this.close = true;\n    this.links = [];\n    this.lastNoiseTime = 0;\n    this.destroyed = false;\n    var options = container.options;\n    var particlesOptions = new Particles_1.Particles();\n    particlesOptions.load(options.particles);\n\n    if ((overrideOptions === null || overrideOptions === void 0 ? void 0 : overrideOptions.shape) !== undefined) {\n      var shapeType = (_a = overrideOptions.shape.type) !== null && _a !== void 0 ? _a : particlesOptions.shape.type;\n      this.shape = shapeType instanceof Array ? Utils_1.Utils.itemFromArray(shapeType) : shapeType;\n      var shapeOptions = new Shape_1.Shape();\n      shapeOptions.load(overrideOptions.shape);\n\n      if (this.shape !== undefined) {\n        var shapeData = shapeOptions.options[this.shape];\n\n        if (shapeData !== undefined) {\n          this.shapeData = Utils_1.Utils.deepExtend({}, shapeData instanceof Array ? Utils_1.Utils.itemFromArray(shapeData) : shapeData);\n          this.fill = (_c = (_b = this.shapeData) === null || _b === void 0 ? void 0 : _b.fill) !== null && _c !== void 0 ? _c : this.fill;\n          this.close = (_e = (_d = this.shapeData) === null || _d === void 0 ? void 0 : _d.close) !== null && _e !== void 0 ? _e : this.close;\n        }\n      }\n    } else {\n      var shapeType = particlesOptions.shape.type;\n      this.shape = shapeType instanceof Array ? Utils_1.Utils.itemFromArray(shapeType) : shapeType;\n      var shapeData = particlesOptions.shape.options[this.shape];\n\n      if (shapeData) {\n        this.shapeData = Utils_1.Utils.deepExtend({}, shapeData instanceof Array ? Utils_1.Utils.itemFromArray(shapeData) : shapeData);\n        this.fill = (_g = (_f = this.shapeData) === null || _f === void 0 ? void 0 : _f.fill) !== null && _g !== void 0 ? _g : this.fill;\n        this.close = (_j = (_h = this.shapeData) === null || _h === void 0 ? void 0 : _h.close) !== null && _j !== void 0 ? _j : this.close;\n      }\n    }\n\n    if (overrideOptions !== undefined) {\n      particlesOptions.load(overrideOptions);\n    }\n\n    if (((_k = this.shapeData) === null || _k === void 0 ? void 0 : _k.particles) !== undefined) {\n      particlesOptions.load((_l = this.shapeData) === null || _l === void 0 ? void 0 : _l.particles);\n    }\n\n    this.particlesOptions = particlesOptions;\n    var noiseDelay = this.particlesOptions.move.noise.delay;\n    this.noiseDelay = (noiseDelay.random.enable ? Utils_1.Utils.randomInRange(noiseDelay.random.minimumValue, noiseDelay.value) : noiseDelay.value) * 1000;\n    container.retina.initParticle(this);\n    var color = this.particlesOptions.color;\n    var sizeValue = (_m = this.sizeValue) !== null && _m !== void 0 ? _m : container.retina.sizeValue;\n    var randomSize = typeof this.particlesOptions.size.random === \"boolean\" ? this.particlesOptions.size.random : this.particlesOptions.size.random.enable;\n    this.size = {\n      value: randomSize && this.randomMinimumSize !== undefined ? Utils_1.Utils.randomInRange(this.randomMinimumSize, sizeValue) : sizeValue\n    };\n    this.direction = this.particlesOptions.move.direction;\n    this.bubble = {\n      inRange: false\n    };\n    this.angle = this.particlesOptions.rotate.random ? Math.random() * 360 : this.particlesOptions.rotate.value;\n\n    if (this.particlesOptions.rotate.direction === Enums_1.RotateDirection.random) {\n      var index = Math.floor(Math.random() * 2);\n\n      if (index > 0) {\n        this.rotateDirection = Enums_1.RotateDirection.counterClockwise;\n      } else {\n        this.rotateDirection = Enums_1.RotateDirection.clockwise;\n      }\n    } else {\n      this.rotateDirection = this.particlesOptions.rotate.direction;\n    }\n\n    if (this.particlesOptions.size.animation.enable) {\n      switch (this.particlesOptions.size.animation.startValue) {\n        case Enums_1.StartValueType.min:\n          if (!randomSize) {\n            var pxRatio = container.retina.pixelRatio;\n            this.size.value = this.particlesOptions.size.animation.minimumValue * pxRatio;\n          }\n\n          break;\n      }\n\n      this.size.status = Enums_1.SizeAnimationStatus.increasing;\n      this.size.velocity = ((_o = this.sizeAnimationSpeed) !== null && _o !== void 0 ? _o : container.retina.sizeAnimationSpeed) / 100;\n\n      if (!this.particlesOptions.size.animation.sync) {\n        this.size.velocity = this.size.velocity * Math.random();\n      }\n    }\n\n    if (this.particlesOptions.color.animation.enable) {\n      this.colorVelocity = this.particlesOptions.color.animation.speed / 100;\n\n      if (!this.particlesOptions.color.animation.sync) {\n        this.colorVelocity = this.colorVelocity * Math.random();\n      }\n    } else {\n      this.colorVelocity = 0;\n    }\n\n    if (this.particlesOptions.rotate.animation.enable) {\n      if (!this.particlesOptions.rotate.animation.sync) {\n        this.angle = Math.random() * 360;\n      }\n    }\n\n    this.position = this.calcPosition(this.container, position);\n    this.offset = {\n      x: 0,\n      y: 0\n    };\n\n    if (this.particlesOptions.collisions.enable) {\n      this.checkOverlap(position);\n    }\n\n    this.color = Utils_1.ColorUtils.colorToHsl(color);\n    var randomOpacity = this.particlesOptions.opacity.random;\n    var opacityValue = this.particlesOptions.opacity.value;\n    this.opacity = {\n      value: randomOpacity.enable ? Utils_1.Utils.randomInRange(randomOpacity.minimumValue, opacityValue) : opacityValue\n    };\n\n    if (this.particlesOptions.opacity.animation.enable) {\n      this.opacity.status = Enums_1.OpacityAnimationStatus.increasing;\n      this.opacity.velocity = this.particlesOptions.opacity.animation.speed / 100;\n\n      if (!this.particlesOptions.opacity.animation.sync) {\n        this.opacity.velocity *= Math.random();\n      }\n    }\n\n    this.initialVelocity = this.calculateVelocity();\n    this.velocity = {\n      horizontal: this.initialVelocity.horizontal,\n      vertical: this.initialVelocity.vertical\n    };\n    var drawer = container.drawers[this.shape];\n\n    if (!drawer) {\n      drawer = Utils_1.Plugins.getShapeDrawer(this.shape);\n      container.drawers[this.shape] = drawer;\n    }\n\n    if (this.shape === Enums_1.ShapeType.image || this.shape === Enums_1.ShapeType.images) {\n      var shape = this.particlesOptions.shape;\n      var imageDrawer = drawer;\n      var imagesOptions = shape.options[this.shape];\n      var images = imageDrawer.getImages(container).images;\n      var index = Utils_1.Utils.arrayRandomIndex(images);\n      var image_1 = images[index];\n      var optionsImage_1 = imagesOptions instanceof Array ? imagesOptions.filter(function (t) {\n        return t.src === image_1.source;\n      })[0] : imagesOptions;\n      var color_1 = this.getColor();\n\n      if ((image_1 === null || image_1 === void 0 ? void 0 : image_1.svgData) !== undefined && optionsImage_1.replaceColor && color_1) {\n        var svgColoredData = Utils_1.Utils.replaceColorSvg(image_1, color_1, this.opacity.value);\n        var svg = new Blob([svgColoredData], {\n          type: \"image/svg+xml\"\n        });\n        var domUrl_1 = window.URL || window.webkitURL || window;\n        var url_1 = domUrl_1.createObjectURL(svg);\n        var img_1 = new Image();\n        this.image = {\n          data: image_1,\n          loaded: false,\n          ratio: optionsImage_1.width / optionsImage_1.height,\n          replaceColor: (_p = optionsImage_1.replaceColor) !== null && _p !== void 0 ? _p : optionsImage_1.replace_color,\n          source: optionsImage_1.src\n        };\n        img_1.addEventListener(\"load\", function () {\n          if (_this.image) {\n            _this.image.loaded = true;\n            image_1.element = img_1;\n          }\n\n          domUrl_1.revokeObjectURL(url_1);\n        });\n        img_1.addEventListener(\"error\", function () {\n          domUrl_1.revokeObjectURL(url_1);\n          Utils_1.Utils.loadImage(optionsImage_1.src).then(function (img2) {\n            if (_this.image) {\n              image_1.element = img2.element;\n              _this.image.loaded = true;\n            }\n          });\n        });\n        img_1.src = url_1;\n      } else {\n        this.image = {\n          data: image_1,\n          loaded: true,\n          ratio: optionsImage_1.width / optionsImage_1.height,\n          replaceColor: (_q = optionsImage_1.replaceColor) !== null && _q !== void 0 ? _q : optionsImage_1.replace_color,\n          source: optionsImage_1.src\n        };\n      }\n\n      if (!this.image.ratio) {\n        this.image.ratio = 1;\n      }\n\n      this.fill = (_r = optionsImage_1.fill) !== null && _r !== void 0 ? _r : this.fill;\n      this.close = (_s = optionsImage_1.close) !== null && _s !== void 0 ? _s : this.close;\n    }\n\n    this.stroke = this.particlesOptions.stroke instanceof Array ? Utils_1.Utils.itemFromArray(this.particlesOptions.stroke) : this.particlesOptions.stroke;\n    this.strokeColor = Utils_1.ColorUtils.colorToRgb(this.stroke.color);\n    this.shadowColor = Utils_1.ColorUtils.colorToRgb(this.particlesOptions.shadow.color);\n    this.updater = new Updater_1.Updater(this.container, this);\n  }\n\n  Particle.prototype.update = function (index, delta) {\n    this.links = [];\n    this.updater.update(delta);\n  };\n\n  Particle.prototype.draw = function (delta) {\n    var _a;\n\n    if (((_a = this.image) === null || _a === void 0 ? void 0 : _a.loaded) === false) {\n      return;\n    }\n\n    this.container.canvas.drawParticle(this, delta);\n  };\n\n  Particle.prototype.isOverlapping = function () {\n    var _this = this;\n\n    var container = this.container;\n    var collisionFound = false;\n    var iterations = 0;\n    var pos1 = this.getPosition();\n\n    for (var _i = 0, _a = container.particles.array.filter(function (t) {\n      return t != _this;\n    }); _i < _a.length; _i++) {\n      var p2 = _a[_i];\n      iterations++;\n      var pos2 = p2.getPosition();\n      var dist = Utils_1.Utils.getDistance(pos1, pos2);\n\n      if (dist <= this.size.value + p2.size.value) {\n        collisionFound = true;\n        break;\n      }\n    }\n\n    return {\n      collisionFound: collisionFound,\n      iterations: iterations\n    };\n  };\n\n  Particle.prototype.checkOverlap = function (position) {\n    var container = this.container;\n    var overlapResult = this.isOverlapping();\n\n    if (overlapResult.iterations >= container.particles.count) {\n      container.particles.remove(this);\n    } else if (overlapResult.collisionFound) {\n      this.position.x = position ? position.x : Math.random() * container.canvas.size.width;\n      this.position.y = position ? position.y : Math.random() * container.canvas.size.height;\n      this.checkOverlap();\n    }\n  };\n\n  Particle.prototype.startInfection = function (stage) {\n    var container = this.container;\n    var options = container.options;\n    var stages = options.infection.stages;\n    var stagesCount = stages.length;\n\n    if (stage > stagesCount || stage < 0) {\n      return;\n    }\n\n    this.infectionDelay = 0;\n    this.infectionDelayStage = stage;\n  };\n\n  Particle.prototype.updateInfectionStage = function (stage) {\n    var container = this.container;\n    var options = container.options;\n    var stagesCount = options.infection.stages.length;\n\n    if (stage > stagesCount || stage < 0 || this.infectionStage !== undefined && this.infectionStage > stage) {\n      return;\n    }\n\n    if (this.infectionTimeout !== undefined) {\n      window.clearTimeout(this.infectionTimeout);\n    }\n\n    this.infectionStage = stage;\n    this.infectionTime = 0;\n  };\n\n  Particle.prototype.updateInfection = function (delta) {\n    var container = this.container;\n    var options = container.options;\n    var infection = options.infection;\n    var stages = options.infection.stages;\n    var stagesCount = stages.length;\n\n    if (this.infectionDelay !== undefined && this.infectionDelayStage !== undefined) {\n      var stage = this.infectionDelayStage;\n\n      if (stage > stagesCount || stage < 0) {\n        return;\n      }\n\n      if (this.infectionDelay > infection.delay * 1000) {\n        this.infectionStage = stage;\n        this.infectionTime = 0;\n        delete this.infectionDelay;\n        delete this.infectionDelayStage;\n      } else {\n        this.infectionDelay += delta;\n      }\n    } else {\n      delete this.infectionDelay;\n      delete this.infectionDelayStage;\n    }\n\n    if (this.infectionStage !== undefined && this.infectionTime !== undefined) {\n      var infectionStage = stages[this.infectionStage];\n\n      if (infectionStage.duration !== undefined && infectionStage.duration >= 0) {\n        if (this.infectionTime > infectionStage.duration * 1000) {\n          this.nextInfectionStage();\n        } else {\n          this.infectionTime += delta;\n        }\n      } else {\n        this.infectionTime += delta;\n      }\n    } else {\n      delete this.infectionStage;\n      delete this.infectionTime;\n    }\n  };\n\n  Particle.prototype.getPosition = function () {\n    return {\n      x: this.position.x + this.offset.x,\n      y: this.position.y + this.offset.y\n    };\n  };\n\n  Particle.prototype.getColor = function () {\n    var _a;\n\n    return (_a = this.bubble.color) !== null && _a !== void 0 ? _a : this.color;\n  };\n\n  Particle.prototype.destroy = function () {\n    this.destroyed = true;\n  };\n\n  Particle.prototype.nextInfectionStage = function () {\n    var container = this.container;\n    var options = container.options;\n    var stagesCount = options.infection.stages.length;\n\n    if (stagesCount <= 0 || this.infectionStage === undefined) {\n      return;\n    }\n\n    this.infectionTime = 0;\n\n    if (stagesCount <= ++this.infectionStage) {\n      if (options.infection.cure) {\n        delete this.infectionStage;\n        delete this.infectionTime;\n        return;\n      } else {\n        this.infectionStage = 0;\n        this.infectionTime = 0;\n      }\n    }\n  };\n\n  Particle.prototype.calcPosition = function (container, position) {\n    for (var id in container.plugins) {\n      var plugin = container.plugins[id];\n      var pluginPos = plugin.particlePosition !== undefined ? plugin.particlePosition(position, this) : undefined;\n\n      if (pluginPos !== undefined) {\n        return pluginPos;\n      }\n    }\n\n    var pos = {\n      x: 0,\n      y: 0\n    };\n    pos.x = position ? position.x : Math.random() * container.canvas.size.width;\n    pos.y = position ? position.y : Math.random() * container.canvas.size.height;\n\n    if (pos.x > container.canvas.size.width - this.size.value * 2) {\n      pos.x -= this.size.value;\n    } else if (pos.x < this.size.value * 2) {\n      pos.x += this.size.value;\n    }\n\n    if (pos.y > container.canvas.size.height - this.size.value * 2) {\n      pos.y -= this.size.value;\n    } else if (pos.y < this.size.value * 2) {\n      pos.y += this.size.value;\n    }\n\n    return pos;\n  };\n\n  Particle.prototype.calculateVelocity = function () {\n    var baseVelocity = Utils_1.Utils.getParticleBaseVelocity(this);\n    var res = {\n      horizontal: 0,\n      vertical: 0\n    };\n\n    if (this.particlesOptions.move.straight) {\n      res.horizontal = baseVelocity.x;\n      res.vertical = baseVelocity.y;\n\n      if (this.particlesOptions.move.random) {\n        res.horizontal *= Math.random();\n        res.vertical *= Math.random();\n      }\n    } else {\n      res.horizontal = baseVelocity.x + Math.random() - 0.5;\n      res.vertical = baseVelocity.y + Math.random() - 0.5;\n    }\n\n    return res;\n  };\n\n  return Particle;\n}();\n\nexports.Particle = Particle;","map":null,"metadata":{},"sourceType":"script"}