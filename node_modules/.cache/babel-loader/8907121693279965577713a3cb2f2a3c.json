{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.bounceVertical = exports.bounceHorizontal = void 0;\n\nconst Enums_1 = require(\"../../Enums\");\n\nconst Utils_1 = require(\"../../Utils\");\n\nfunction bounceHorizontal(data) {\n  if (!(data.outMode === Enums_1.OutMode.bounce || data.outMode === Enums_1.OutMode.bounceHorizontal || data.outMode === \"bounceHorizontal\" || data.outMode === Enums_1.OutMode.split)) {\n    return;\n  }\n\n  const velocity = data.particle.velocity.x;\n  let bounced = false;\n\n  if (data.direction === Enums_1.OutModeDirection.right && data.bounds.right >= data.canvasSize.width && velocity > 0 || data.direction === Enums_1.OutModeDirection.left && data.bounds.left <= 0 && velocity < 0) {\n    const newVelocity = Utils_1.getRangeValue(data.particle.options.bounce.horizontal.value);\n    data.particle.velocity.x *= -newVelocity;\n    bounced = true;\n  }\n\n  if (!bounced) {\n    return;\n  }\n\n  const minPos = data.offset.x + data.size;\n\n  if (data.bounds.right >= data.canvasSize.width) {\n    data.particle.position.x = data.canvasSize.width - minPos;\n  } else if (data.bounds.left <= 0) {\n    data.particle.position.x = minPos;\n  }\n\n  if (data.outMode === Enums_1.OutMode.split) {\n    data.particle.destroy();\n  }\n}\n\nexports.bounceHorizontal = bounceHorizontal;\n\nfunction bounceVertical(data) {\n  if (data.outMode === Enums_1.OutMode.bounce || data.outMode === Enums_1.OutMode.bounceVertical || data.outMode === \"bounceVertical\" || data.outMode === Enums_1.OutMode.split) {\n    const velocity = data.particle.velocity.y;\n    let bounced = false;\n\n    if (data.direction === Enums_1.OutModeDirection.bottom && data.bounds.bottom >= data.canvasSize.height && velocity > 0 || data.direction === Enums_1.OutModeDirection.top && data.bounds.top <= 0 && velocity < 0) {\n      const newVelocity = Utils_1.getRangeValue(data.particle.options.bounce.vertical.value);\n      data.particle.velocity.y *= -newVelocity;\n      bounced = true;\n    }\n\n    if (!bounced) {\n      return;\n    }\n\n    const minPos = data.offset.y + data.size;\n\n    if (data.bounds.bottom >= data.canvasSize.height) {\n      data.particle.position.y = data.canvasSize.height - minPos;\n    } else if (data.bounds.top <= 0) {\n      data.particle.position.y = minPos;\n    }\n\n    if (data.outMode === Enums_1.OutMode.split) {\n      data.particle.destroy();\n    }\n  }\n}\n\nexports.bounceVertical = bounceVertical;","map":null,"metadata":{},"sourceType":"script"}