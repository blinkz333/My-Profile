{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.drawEllipse = exports.drawParticlePlugin = exports.drawPlugin = exports.drawShapeAfterEffect = exports.drawShape = exports.drawParticle = exports.drawGrabLine = exports.gradient = exports.drawConnectLine = exports.drawLinkTriangle = exports.drawLinkLine = exports.clear = exports.paintBase = void 0;\n\nconst NumberUtils_1 = require(\"./NumberUtils\");\n\nconst ColorUtils_1 = require(\"./ColorUtils\");\n\nfunction drawLine(context, begin, end) {\n  context.beginPath();\n  context.moveTo(begin.x, begin.y);\n  context.lineTo(end.x, end.y);\n  context.closePath();\n}\n\nfunction drawTriangle(context, p1, p2, p3) {\n  context.beginPath();\n  context.moveTo(p1.x, p1.y);\n  context.lineTo(p2.x, p2.y);\n  context.lineTo(p3.x, p3.y);\n  context.closePath();\n}\n\nfunction paintBase(context, dimension, baseColor) {\n  context.save();\n  context.fillStyle = baseColor !== null && baseColor !== void 0 ? baseColor : \"rgba(0,0,0,0)\";\n  context.fillRect(0, 0, dimension.width, dimension.height);\n  context.restore();\n}\n\nexports.paintBase = paintBase;\n\nfunction clear(context, dimension) {\n  context.clearRect(0, 0, dimension.width, dimension.height);\n}\n\nexports.clear = clear;\n\nfunction drawLinkLine(context, width, begin, end, maxDistance, canvasSize, warp, backgroundMask, composite, colorLine, opacity, shadow) {\n  let drawn = false;\n\n  if (NumberUtils_1.getDistance(begin, end) <= maxDistance) {\n    drawLine(context, begin, end);\n    drawn = true;\n  } else if (warp) {\n    let pi1;\n    let pi2;\n    const endNE = {\n      x: end.x - canvasSize.width,\n      y: end.y\n    };\n    const d1 = NumberUtils_1.getDistances(begin, endNE);\n\n    if (d1.distance <= maxDistance) {\n      const yi = begin.y - d1.dy / d1.dx * begin.x;\n      pi1 = {\n        x: 0,\n        y: yi\n      };\n      pi2 = {\n        x: canvasSize.width,\n        y: yi\n      };\n    } else {\n      const endSW = {\n        x: end.x,\n        y: end.y - canvasSize.height\n      };\n      const d2 = NumberUtils_1.getDistances(begin, endSW);\n\n      if (d2.distance <= maxDistance) {\n        const yi = begin.y - d2.dy / d2.dx * begin.x;\n        const xi = -yi / (d2.dy / d2.dx);\n        pi1 = {\n          x: xi,\n          y: 0\n        };\n        pi2 = {\n          x: xi,\n          y: canvasSize.height\n        };\n      } else {\n        const endSE = {\n          x: end.x - canvasSize.width,\n          y: end.y - canvasSize.height\n        };\n        const d3 = NumberUtils_1.getDistances(begin, endSE);\n\n        if (d3.distance <= maxDistance) {\n          const yi = begin.y - d3.dy / d3.dx * begin.x;\n          const xi = -yi / (d3.dy / d3.dx);\n          pi1 = {\n            x: xi,\n            y: yi\n          };\n          pi2 = {\n            x: pi1.x + canvasSize.width,\n            y: pi1.y + canvasSize.height\n          };\n        }\n      }\n    }\n\n    if (pi1 && pi2) {\n      drawLine(context, begin, pi1);\n      drawLine(context, end, pi2);\n      drawn = true;\n    }\n  }\n\n  if (!drawn) {\n    return;\n  }\n\n  context.lineWidth = width;\n\n  if (backgroundMask) {\n    context.globalCompositeOperation = composite;\n  }\n\n  context.strokeStyle = ColorUtils_1.getStyleFromRgb(colorLine, opacity);\n\n  if (shadow.enable) {\n    const shadowColor = ColorUtils_1.colorToRgb(shadow.color);\n\n    if (shadowColor) {\n      context.shadowBlur = shadow.blur;\n      context.shadowColor = ColorUtils_1.getStyleFromRgb(shadowColor);\n    }\n  }\n\n  context.stroke();\n}\n\nexports.drawLinkLine = drawLinkLine;\n\nfunction drawLinkTriangle(context, pos1, pos2, pos3, backgroundMask, composite, colorTriangle, opacityTriangle) {\n  drawTriangle(context, pos1, pos2, pos3);\n\n  if (backgroundMask) {\n    context.globalCompositeOperation = composite;\n  }\n\n  context.fillStyle = ColorUtils_1.getStyleFromRgb(colorTriangle, opacityTriangle);\n  context.fill();\n}\n\nexports.drawLinkTriangle = drawLinkTriangle;\n\nfunction drawConnectLine(context, width, lineStyle, begin, end) {\n  context.save();\n  drawLine(context, begin, end);\n  context.lineWidth = width;\n  context.strokeStyle = lineStyle;\n  context.stroke();\n  context.restore();\n}\n\nexports.drawConnectLine = drawConnectLine;\n\nfunction gradient(context, p1, p2, opacity) {\n  const gradStop = Math.floor(p2.getRadius() / p1.getRadius());\n  const color1 = p1.getFillColor();\n  const color2 = p2.getFillColor();\n\n  if (!color1 || !color2) {\n    return;\n  }\n\n  const sourcePos = p1.getPosition();\n  const destPos = p2.getPosition();\n  const midRgb = ColorUtils_1.colorMix(color1, color2, p1.getRadius(), p2.getRadius());\n  const grad = context.createLinearGradient(sourcePos.x, sourcePos.y, destPos.x, destPos.y);\n  grad.addColorStop(0, ColorUtils_1.getStyleFromHsl(color1, opacity));\n  grad.addColorStop(gradStop > 1 ? 1 : gradStop, ColorUtils_1.getStyleFromRgb(midRgb, opacity));\n  grad.addColorStop(1, ColorUtils_1.getStyleFromHsl(color2, opacity));\n  return grad;\n}\n\nexports.gradient = gradient;\n\nfunction drawGrabLine(context, width, begin, end, colorLine, opacity) {\n  context.save();\n  drawLine(context, begin, end);\n  context.strokeStyle = ColorUtils_1.getStyleFromRgb(colorLine, opacity);\n  context.lineWidth = width;\n  context.stroke();\n  context.restore();\n}\n\nexports.drawGrabLine = drawGrabLine;\n\nfunction drawParticle(container, context, particle, delta, fillColorValue, strokeColorValue, backgroundMask, composite, radius, opacity, shadow) {\n  const pos = particle.getPosition();\n  const tiltOptions = particle.options.tilt;\n  const rollOptions = particle.options.roll;\n  context.save();\n\n  if (tiltOptions.enable || rollOptions.enable) {\n    context.setTransform(rollOptions.enable ? Math.cos(particle.rollAngle) : 1, tiltOptions.enable ? Math.cos(particle.tilt.value) * particle.tilt.cosDirection : 0, tiltOptions.enable ? Math.sin(particle.tilt.value) * particle.tilt.sinDirection : 0, rollOptions.enable ? Math.sin(particle.rollAngle) : 1, pos.x, pos.y);\n  } else {\n    context.translate(pos.x, pos.y);\n  }\n\n  context.beginPath();\n  const angle = particle.rotate.value + (particle.options.rotate.path ? particle.velocity.angle : 0);\n\n  if (angle !== 0) {\n    context.rotate(angle);\n  }\n\n  if (backgroundMask) {\n    context.globalCompositeOperation = composite;\n  }\n\n  const shadowColor = particle.shadowColor;\n\n  if (shadow.enable && shadowColor) {\n    context.shadowBlur = shadow.blur;\n    context.shadowColor = ColorUtils_1.getStyleFromRgb(shadowColor);\n    context.shadowOffsetX = shadow.offset.x;\n    context.shadowOffsetY = shadow.offset.y;\n  }\n\n  if (fillColorValue) {\n    context.fillStyle = fillColorValue;\n  }\n\n  const stroke = particle.stroke;\n  context.lineWidth = particle.strokeWidth;\n\n  if (strokeColorValue) {\n    context.strokeStyle = strokeColorValue;\n  }\n\n  drawShape(container, context, particle, radius, opacity, delta);\n\n  if (stroke.width > 0) {\n    context.stroke();\n  }\n\n  if (particle.close) {\n    context.closePath();\n  }\n\n  if (particle.fill) {\n    context.fill();\n  }\n\n  context.restore();\n  context.save();\n\n  if (tiltOptions.enable) {\n    context.setTransform(1, Math.cos(particle.tilt.value) * particle.tilt.cosDirection, Math.sin(particle.tilt.value) * particle.tilt.sinDirection, 1, pos.x, pos.y);\n  } else {\n    context.translate(pos.x, pos.y);\n  }\n\n  if (angle !== 0) {\n    context.rotate(angle);\n  }\n\n  if (backgroundMask) {\n    context.globalCompositeOperation = composite;\n  }\n\n  drawShapeAfterEffect(container, context, particle, radius, opacity, delta);\n  context.restore();\n}\n\nexports.drawParticle = drawParticle;\n\nfunction drawShape(container, context, particle, radius, opacity, delta) {\n  if (!particle.shape) {\n    return;\n  }\n\n  const drawer = container.drawers.get(particle.shape);\n\n  if (!drawer) {\n    return;\n  }\n\n  drawer.draw(context, particle, radius, opacity, delta, container.retina.pixelRatio);\n}\n\nexports.drawShape = drawShape;\n\nfunction drawShapeAfterEffect(container, context, particle, radius, opacity, delta) {\n  if (!particle.shape) {\n    return;\n  }\n\n  const drawer = container.drawers.get(particle.shape);\n\n  if (!(drawer === null || drawer === void 0 ? void 0 : drawer.afterEffect)) {\n    return;\n  }\n\n  drawer.afterEffect(context, particle, radius, opacity, delta, container.retina.pixelRatio);\n}\n\nexports.drawShapeAfterEffect = drawShapeAfterEffect;\n\nfunction drawPlugin(context, plugin, delta) {\n  if (!plugin.draw) {\n    return;\n  }\n\n  context.save();\n  plugin.draw(context, delta);\n  context.restore();\n}\n\nexports.drawPlugin = drawPlugin;\n\nfunction drawParticlePlugin(context, plugin, particle, delta) {\n  if (plugin.drawParticle !== undefined) {\n    context.save();\n    plugin.drawParticle(context, particle, delta);\n    context.restore();\n  }\n}\n\nexports.drawParticlePlugin = drawParticlePlugin;\n\nfunction drawEllipse(context, particle, fillColorValue, radius, opacity, width, rotation, start, end) {\n  const pos = particle.getPosition();\n\n  if (fillColorValue) {\n    context.strokeStyle = ColorUtils_1.getStyleFromHsl(fillColorValue, opacity);\n  }\n\n  if (width === 0) {\n    return;\n  }\n\n  context.lineWidth = width;\n  const rotationRadian = rotation * Math.PI / 180;\n  context.beginPath();\n  context.ellipse(pos.x, pos.y, radius / 2, radius * 2, rotationRadian, start, end);\n  context.stroke();\n}\n\nexports.drawEllipse = drawEllipse;","map":null,"metadata":{},"sourceType":"script"}