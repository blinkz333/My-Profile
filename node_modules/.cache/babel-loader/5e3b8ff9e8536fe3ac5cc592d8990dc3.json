{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ColorUtils = void 0;\n\nvar Utils_1 = require(\"./Utils\");\n\nvar Constants_1 = require(\"./Constants\");\n\nvar ColorUtils = function () {\n  function ColorUtils() {}\n\n  ColorUtils.colorToRgb = function (input) {\n    var _a, _b;\n\n    if (input === undefined) {\n      return;\n    }\n\n    var color = typeof input === \"string\" ? {\n      value: input\n    } : input;\n    var res;\n\n    if (typeof color.value === \"string\") {\n      if (color.value === Constants_1.Constants.randomColorValue) {\n        res = this.getRandomRgbColor();\n      } else {\n        res = ColorUtils.stringToRgb(color.value);\n      }\n    } else {\n      if (color.value instanceof Array) {\n        var colorSelected = Utils_1.Utils.itemFromArray(color.value);\n        res = ColorUtils.colorToRgb({\n          value: colorSelected\n        });\n      } else {\n        var colorValue = color.value;\n        var rgbColor = (_a = colorValue.rgb) !== null && _a !== void 0 ? _a : color.value;\n\n        if (rgbColor.r !== undefined) {\n          res = rgbColor;\n        } else {\n          var hslColor = (_b = colorValue.hsl) !== null && _b !== void 0 ? _b : color.value;\n\n          if (hslColor.h !== undefined) {\n            res = ColorUtils.hslToRgb(hslColor);\n          }\n        }\n      }\n    }\n\n    return res;\n  };\n\n  ColorUtils.colorToHsl = function (color) {\n    var rgb = this.colorToRgb(color);\n    return rgb !== undefined ? this.rgbToHsl(rgb) : rgb;\n  };\n\n  ColorUtils.rgbToHsl = function (color) {\n    var r1 = color.r / 255;\n    var g1 = color.g / 255;\n    var b1 = color.b / 255;\n    var maxColor = Math.max(r1, g1, b1);\n    var minColor = Math.min(r1, g1, b1);\n    var res = {\n      h: 0,\n      l: (maxColor + minColor) / 2,\n      s: 0\n    };\n\n    if (maxColor != minColor) {\n      if (res.l < 0.5) {\n        res.s = (maxColor - minColor) / (maxColor + minColor);\n      } else {\n        res.s = (maxColor - minColor) / (2.0 - maxColor - minColor);\n      }\n\n      if (r1 === maxColor) {\n        res.h = (g1 - b1) / (maxColor - minColor);\n      } else if (g1 === maxColor) {\n        res.h = 2.0 + (b1 - r1) / (maxColor - minColor);\n      } else {\n        res.h = 4.0 + (r1 - g1) / (maxColor - minColor);\n      }\n    }\n\n    res.l *= 100;\n    res.s *= 100;\n    res.h *= 60;\n\n    if (res.h < 0) {\n      res.h += 360;\n    }\n\n    return res;\n  };\n\n  ColorUtils.stringToAlpha = function (input) {\n    var _a;\n\n    return (_a = ColorUtils.stringToRgba(input)) === null || _a === void 0 ? void 0 : _a.a;\n  };\n\n  ColorUtils.stringToRgb = function (input) {\n    return ColorUtils.stringToRgba(input);\n  };\n\n  ColorUtils.hslToRgb = function (hsl) {\n    var result = {\n      b: 0,\n      g: 0,\n      r: 0\n    };\n    var hslPercent = {\n      h: hsl.h / 360,\n      l: hsl.l / 100,\n      s: hsl.s / 100\n    };\n\n    if (hslPercent.s === 0) {\n      result.b = hslPercent.l;\n      result.g = hslPercent.l;\n      result.r = hslPercent.l;\n    } else {\n      var q = hslPercent.l < 0.5 ? hslPercent.l * (1 + hslPercent.s) : hslPercent.l + hslPercent.s - hslPercent.l * hslPercent.s;\n      var p = 2 * hslPercent.l - q;\n      result.r = ColorUtils.hue2rgb(p, q, hslPercent.h + 1 / 3);\n      result.g = ColorUtils.hue2rgb(p, q, hslPercent.h);\n      result.b = ColorUtils.hue2rgb(p, q, hslPercent.h - 1 / 3);\n    }\n\n    result.r = Math.floor(result.r * 255);\n    result.g = Math.floor(result.g * 255);\n    result.b = Math.floor(result.b * 255);\n    return result;\n  };\n\n  ColorUtils.hslaToRgba = function (hsla) {\n    var rgbResult = ColorUtils.hslToRgb(hsla);\n    return {\n      a: hsla.a,\n      b: rgbResult.b,\n      g: rgbResult.g,\n      r: rgbResult.r\n    };\n  };\n\n  ColorUtils.getRandomRgbColor = function (min) {\n    var _a;\n\n    var fixedMin = min || 0;\n    var minColor = fixedMin + fixedMin * Math.pow(16, 2) + fixedMin * Math.pow(16, 4);\n    var factor = minColor ^ 0xffffff;\n    var randomColor = Math.floor(Math.random() * factor | minColor).toString(16);\n    return (_a = this.stringToRgb(\"#\" + randomColor)) !== null && _a !== void 0 ? _a : {\n      b: 0,\n      g: 0,\n      r: 0\n    };\n  };\n\n  ColorUtils.getStyleFromRgb = function (color, opacity) {\n    return \"rgba(\" + color.r + \", \" + color.g + \", \" + color.b + \", \" + (opacity !== null && opacity !== void 0 ? opacity : 1) + \")\";\n  };\n\n  ColorUtils.getStyleFromHsl = function (color, opacity) {\n    return \"hsla(\" + color.h + \", \" + color.s + \"%, \" + color.l + \"%, \" + (opacity !== null && opacity !== void 0 ? opacity : 1) + \")\";\n  };\n\n  ColorUtils.mix = function (color1, color2, size1, size2) {\n    var rgb1 = color1;\n    var rgb2 = color2;\n\n    if (rgb1.r === undefined) {\n      rgb1 = this.hslToRgb(color1);\n    }\n\n    if (rgb2.r === undefined) {\n      rgb2 = this.hslToRgb(color2);\n    }\n\n    return {\n      b: Utils_1.Utils.mix(rgb1.b, rgb2.b, size1, size2),\n      g: Utils_1.Utils.mix(rgb1.g, rgb2.g, size1, size2),\n      r: Utils_1.Utils.mix(rgb1.r, rgb2.r, size1, size2)\n    };\n  };\n\n  ColorUtils.hue2rgb = function (p, q, t) {\n    var tCalc = t;\n\n    if (tCalc < 0) {\n      tCalc += 1;\n    }\n\n    if (tCalc > 1) {\n      tCalc -= 1;\n    }\n\n    if (tCalc < 1 / 6) {\n      return p + (q - p) * 6 * tCalc;\n    }\n\n    if (tCalc < 1 / 2) {\n      return q;\n    }\n\n    if (tCalc < 2 / 3) {\n      return p + (q - p) * (2 / 3 - tCalc) * 6;\n    }\n\n    return p;\n  };\n\n  ColorUtils.stringToRgba = function (input) {\n    if (input.startsWith(\"rgb\")) {\n      var regex = /rgba?\\(\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(,\\s*([\\d.]+)\\s*)?\\)/i;\n      var result = regex.exec(input);\n      return result ? {\n        a: result.length > 4 ? parseFloat(result[5]) : 1,\n        b: parseInt(result[3], 10),\n        g: parseInt(result[2], 10),\n        r: parseInt(result[1], 10)\n      } : undefined;\n    } else if (input.startsWith(\"hsl\")) {\n      var regex = /hsla?\\(\\s*(\\d+)\\s*,\\s*(\\d+)%\\s*,\\s*(\\d+)%\\s*(,\\s*([\\d.]+)\\s*)?\\)/i;\n      var result = regex.exec(input);\n      return result ? ColorUtils.hslaToRgba({\n        a: result.length > 4 ? parseFloat(result[5]) : 1,\n        h: parseInt(result[1], 10),\n        l: parseInt(result[3], 10),\n        s: parseInt(result[2], 10)\n      }) : undefined;\n    } else {\n      var shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])([a-f\\d])?$/i;\n      var hexFixed = input.replace(shorthandRegex, function (_m, r, g, b, a) {\n        return r + r + g + g + b + b + (a !== undefined ? a + a : \"\");\n      });\n      var regex = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})?$/i;\n      var result = regex.exec(hexFixed);\n      return result ? {\n        a: result[4] !== undefined ? parseInt(result[4], 16) / 0xff : 1,\n        b: parseInt(result[3], 16),\n        g: parseInt(result[2], 16),\n        r: parseInt(result[1], 16)\n      } : undefined;\n    }\n  };\n\n  return ColorUtils;\n}();\n\nexports.ColorUtils = ColorUtils;","map":null,"metadata":{},"sourceType":"script"}