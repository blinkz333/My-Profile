{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Attractor = void 0;\n\nconst Utils_1 = require(\"../../../Utils\");\n\nconst ParticlesInteractorBase_1 = require(\"../../../Core/ParticlesInteractorBase\");\n\nclass Attractor extends ParticlesInteractorBase_1.ParticlesInteractorBase {\n  constructor(container) {\n    super(container);\n  }\n\n  interact(p1) {\n    var _a;\n\n    const container = this.container,\n          distance = (_a = p1.attractDistance) !== null && _a !== void 0 ? _a : container.retina.attractDistance,\n          pos1 = p1.getPosition(),\n          query = container.particles.quadTree.queryCircle(pos1, distance);\n\n    for (const p2 of query) {\n      if (p1 === p2 || !p2.options.move.attract.enable || p2.destroyed || p2.spawning) {\n        continue;\n      }\n\n      const pos2 = p2.getPosition(),\n            {\n        dx,\n        dy\n      } = Utils_1.getDistances(pos1, pos2),\n            rotate = p1.options.move.attract.rotate,\n            ax = dx / (rotate.x * 1000),\n            ay = dy / (rotate.y * 1000),\n            p1Factor = p2.size.value / p1.size.value,\n            p2Factor = 1 / p1Factor;\n      p1.velocity.x -= ax * p1Factor;\n      p1.velocity.y -= ay * p1Factor;\n      p2.velocity.x += ax * p2Factor;\n      p2.velocity.y += ay * p2Factor;\n    }\n  }\n\n  isEnabled(particle) {\n    return particle.options.move.attract.enable;\n  }\n\n  reset() {}\n\n}\n\nexports.Attractor = Attractor;","map":null,"metadata":{},"sourceType":"script"}