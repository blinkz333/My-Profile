{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.OutOfCanvasUpdater = void 0;\n\nconst Utils_1 = require(\"../../Utils\");\n\nconst Enums_1 = require(\"../../Enums\");\n\nconst Utils_2 = require(\"./Utils\");\n\nclass OutOfCanvasUpdater {\n  constructor(container) {\n    this.container = container;\n  }\n\n  isEnabled(particle) {\n    return !particle.destroyed && !particle.spawning;\n  }\n\n  update(particle, delta) {\n    var _a, _b, _c, _d;\n\n    const outModes = particle.options.move.outModes;\n    this.updateOutMode(particle, delta, (_a = outModes.bottom) !== null && _a !== void 0 ? _a : outModes.default, Enums_1.OutModeDirection.bottom);\n    this.updateOutMode(particle, delta, (_b = outModes.left) !== null && _b !== void 0 ? _b : outModes.default, Enums_1.OutModeDirection.left);\n    this.updateOutMode(particle, delta, (_c = outModes.right) !== null && _c !== void 0 ? _c : outModes.default, Enums_1.OutModeDirection.right);\n    this.updateOutMode(particle, delta, (_d = outModes.top) !== null && _d !== void 0 ? _d : outModes.default, Enums_1.OutModeDirection.top);\n  }\n\n  updateOutMode(particle, delta, outMode, direction) {\n    switch (outMode) {\n      case Enums_1.OutMode.bounce:\n      case Enums_1.OutMode.bounceVertical:\n      case Enums_1.OutMode.bounceHorizontal:\n      case \"bounceVertical\":\n      case \"bounceHorizontal\":\n      case Enums_1.OutMode.split:\n        this.bounce(particle, delta, direction, outMode);\n        break;\n\n      case Enums_1.OutMode.destroy:\n        this.destroy(particle, direction);\n        break;\n\n      case Enums_1.OutMode.out:\n        this.out(particle, direction);\n        break;\n\n      case Enums_1.OutMode.none:\n      default:\n        this.none(particle, direction);\n        break;\n    }\n  }\n\n  destroy(particle, direction) {\n    const container = this.container;\n\n    if (Utils_1.isPointInside(particle.position, container.canvas.size, particle.getRadius(), direction)) {\n      return;\n    }\n\n    container.particles.remove(particle, undefined, true);\n  }\n\n  out(particle, direction) {\n    const container = this.container;\n\n    if (Utils_1.isPointInside(particle.position, container.canvas.size, particle.getRadius(), direction)) {\n      return;\n    }\n\n    const wrap = particle.options.move.warp,\n          canvasSize = container.canvas.size,\n          newPos = {\n      bottom: canvasSize.height + particle.offset.y,\n      left: -particle.offset.x,\n      right: canvasSize.width + particle.offset.x,\n      top: -particle.offset.y\n    },\n          sizeValue = particle.getRadius(),\n          nextBounds = Utils_1.calculateBounds(particle.position, sizeValue);\n\n    if (direction === Enums_1.OutModeDirection.right && nextBounds.left > canvasSize.width + particle.offset.x) {\n      particle.position.x = newPos.left;\n      particle.initialPosition.x = particle.position.x;\n\n      if (!wrap) {\n        particle.position.y = Math.random() * canvasSize.height;\n        particle.initialPosition.y = particle.position.y;\n      }\n    } else if (direction === Enums_1.OutModeDirection.left && nextBounds.right < -particle.offset.x) {\n      particle.position.x = newPos.right;\n      particle.initialPosition.x = particle.position.x;\n\n      if (!wrap) {\n        particle.position.y = Math.random() * canvasSize.height;\n        particle.initialPosition.y = particle.position.y;\n      }\n    }\n\n    if (direction === Enums_1.OutModeDirection.bottom && nextBounds.top > canvasSize.height + particle.offset.y) {\n      if (!wrap) {\n        particle.position.x = Math.random() * canvasSize.width;\n        particle.initialPosition.x = particle.position.x;\n      }\n\n      particle.position.y = newPos.top;\n      particle.initialPosition.y = particle.position.y;\n    } else if (direction === Enums_1.OutModeDirection.top && nextBounds.bottom < -particle.offset.y) {\n      if (!wrap) {\n        particle.position.x = Math.random() * canvasSize.width;\n        particle.initialPosition.x = particle.position.x;\n      }\n\n      particle.position.y = newPos.bottom;\n      particle.initialPosition.y = particle.position.y;\n    }\n  }\n\n  bounce(particle, delta, direction, outMode) {\n    const container = this.container;\n    let handled = false;\n\n    for (const [, plugin] of container.plugins) {\n      if (plugin.particleBounce !== undefined) {\n        handled = plugin.particleBounce(particle, delta, direction);\n      }\n\n      if (handled) {\n        break;\n      }\n    }\n\n    if (handled) {\n      return;\n    }\n\n    const pos = particle.getPosition(),\n          offset = particle.offset,\n          size = particle.getRadius(),\n          bounds = Utils_1.calculateBounds(pos, size),\n          canvasSize = container.canvas.size;\n    Utils_2.bounceHorizontal({\n      particle,\n      outMode,\n      direction,\n      bounds,\n      canvasSize,\n      offset,\n      size\n    });\n    Utils_2.bounceVertical({\n      particle,\n      outMode,\n      direction,\n      bounds,\n      canvasSize,\n      offset,\n      size\n    });\n  }\n\n  none(particle, direction) {\n    if (particle.options.move.distance.horizontal && (direction === Enums_1.OutModeDirection.left || direction === Enums_1.OutModeDirection.right) || particle.options.move.distance.vertical && (direction === Enums_1.OutModeDirection.top || direction === Enums_1.OutModeDirection.bottom)) {\n      return;\n    }\n\n    const gravityOptions = particle.options.move.gravity,\n          container = this.container;\n\n    if (!gravityOptions.enable) {\n      if (!Utils_1.isPointInside(particle.position, container.canvas.size, particle.getRadius(), direction)) {\n        container.particles.remove(particle);\n      }\n    } else {\n      const position = particle.position;\n\n      if (!gravityOptions.inverse && position.y > container.canvas.size.height && direction === Enums_1.OutModeDirection.bottom || gravityOptions.inverse && position.y < 0 && direction === Enums_1.OutModeDirection.top) {\n        container.particles.remove(particle);\n      }\n    }\n  }\n\n}\n\nexports.OutOfCanvasUpdater = OutOfCanvasUpdater;","map":null,"metadata":{},"sourceType":"script"}