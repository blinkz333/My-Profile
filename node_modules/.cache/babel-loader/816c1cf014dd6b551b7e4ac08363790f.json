{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Bouncer = void 0;\n\nconst Utils_1 = require(\"../../../Utils\");\n\nconst Enums_1 = require(\"../../../Enums\");\n\nconst Vector_1 = require(\"../../../Core/Particle/Vector\");\n\nconst ExternalInteractorBase_1 = require(\"../../../Core/ExternalInteractorBase\");\n\nclass Bouncer extends ExternalInteractorBase_1.ExternalInteractorBase {\n  constructor(container) {\n    super(container);\n  }\n\n  isEnabled() {\n    const container = this.container,\n          options = container.actualOptions,\n          mouse = container.interactivity.mouse,\n          events = options.interactivity.events,\n          divs = events.onDiv;\n    return mouse.position && events.onHover.enable && Utils_1.isInArray(Enums_1.HoverMode.bounce, events.onHover.mode) || Utils_1.isDivModeEnabled(Enums_1.DivMode.bounce, divs);\n  }\n\n  interact() {\n    const container = this.container,\n          options = container.actualOptions,\n          events = options.interactivity.events,\n          mouseMoveStatus = container.interactivity.status === Utils_1.Constants.mouseMoveEvent,\n          hoverEnabled = events.onHover.enable,\n          hoverMode = events.onHover.mode,\n          divs = events.onDiv;\n\n    if (mouseMoveStatus && hoverEnabled && Utils_1.isInArray(Enums_1.HoverMode.bounce, hoverMode)) {\n      this.processMouseBounce();\n    } else {\n      Utils_1.divModeExecute(Enums_1.DivMode.bounce, divs, (selector, div) => this.singleSelectorBounce(selector, div));\n    }\n  }\n\n  reset() {}\n\n  processMouseBounce() {\n    const container = this.container,\n          pxRatio = container.retina.pixelRatio,\n          tolerance = 10 * pxRatio,\n          mousePos = container.interactivity.mouse.position,\n          radius = container.retina.bounceModeDistance;\n\n    if (mousePos) {\n      this.processBounce(mousePos, radius, new Utils_1.Circle(mousePos.x, mousePos.y, radius + tolerance));\n    }\n  }\n\n  singleSelectorBounce(selector, div) {\n    const container = this.container;\n    const query = document.querySelectorAll(selector);\n\n    if (!query.length) {\n      return;\n    }\n\n    query.forEach(item => {\n      const elem = item,\n            pxRatio = container.retina.pixelRatio,\n            pos = {\n        x: (elem.offsetLeft + elem.offsetWidth / 2) * pxRatio,\n        y: (elem.offsetTop + elem.offsetHeight / 2) * pxRatio\n      },\n            radius = elem.offsetWidth / 2 * pxRatio,\n            tolerance = 10 * pxRatio;\n      const area = div.type === Enums_1.DivType.circle ? new Utils_1.Circle(pos.x, pos.y, radius + tolerance) : new Utils_1.Rectangle(elem.offsetLeft * pxRatio - tolerance, elem.offsetTop * pxRatio - tolerance, elem.offsetWidth * pxRatio + tolerance * 2, elem.offsetHeight * pxRatio + tolerance * 2);\n      this.processBounce(pos, radius, area);\n    });\n  }\n\n  processBounce(position, radius, area) {\n    const query = this.container.particles.quadTree.query(area);\n\n    for (const particle of query) {\n      if (area instanceof Utils_1.Circle) {\n        Utils_1.circleBounce(Utils_1.circleBounceDataFromParticle(particle), {\n          position,\n          radius,\n          mass: Math.pow(radius, 2) * Math.PI / 2,\n          velocity: Vector_1.Vector.origin,\n          factor: Vector_1.Vector.origin\n        });\n      } else if (area instanceof Utils_1.Rectangle) {\n        Utils_1.rectBounce(particle, Utils_1.calculateBounds(position, radius));\n      }\n    }\n  }\n\n}\n\nexports.Bouncer = Bouncer;","map":null,"metadata":{},"sourceType":"script"}