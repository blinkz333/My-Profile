{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.OpacityUpdater = void 0;\n\nconst Enums_1 = require(\"../../Enums\");\n\nconst Utils_1 = require(\"../../Utils\");\n\nfunction checkDestroy(particle, destroy, value, minValue, maxValue) {\n  switch (destroy) {\n    case Enums_1.DestroyType.max:\n      if (value >= maxValue) {\n        particle.destroy();\n      }\n\n      break;\n\n    case Enums_1.DestroyType.min:\n      if (value <= minValue) {\n        particle.destroy();\n      }\n\n      break;\n  }\n}\n\nfunction updateOpacity(particle, delta) {\n  var _a, _b;\n\n  const opacityOpt = particle.options.opacity;\n  const opacityAnim = opacityOpt.animation;\n  const minValue = particle.opacity.min;\n  const maxValue = particle.opacity.max;\n\n  if (!(!particle.destroyed && opacityAnim.enable && (opacityAnim.count <= 0 || particle.loops.opacity < opacityAnim.count))) {\n    return;\n  }\n\n  switch (particle.opacity.status) {\n    case Enums_1.AnimationStatus.increasing:\n      if (particle.opacity.value >= maxValue) {\n        particle.opacity.status = Enums_1.AnimationStatus.decreasing;\n        particle.loops.opacity++;\n      } else {\n        particle.opacity.value += ((_a = particle.opacity.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor;\n      }\n\n      break;\n\n    case Enums_1.AnimationStatus.decreasing:\n      if (particle.opacity.value <= minValue) {\n        particle.opacity.status = Enums_1.AnimationStatus.increasing;\n        particle.loops.opacity++;\n      } else {\n        particle.opacity.value -= ((_b = particle.opacity.velocity) !== null && _b !== void 0 ? _b : 0) * delta.factor;\n      }\n\n      break;\n  }\n\n  checkDestroy(particle, opacityAnim.destroy, particle.opacity.value, minValue, maxValue);\n\n  if (!particle.destroyed) {\n    particle.opacity.value = Utils_1.clamp(particle.opacity.value, minValue, maxValue);\n  }\n}\n\nclass OpacityUpdater {\n  isEnabled(particle) {\n    const opacityAnim = particle.options.opacity.anim;\n    return !particle.destroyed && !particle.spawning && opacityAnim.enable && (opacityAnim.count <= 0 || particle.loops.opacity < opacityAnim.count);\n  }\n\n  update(particle, delta) {\n    if (!this.isEnabled(particle)) {\n      return;\n    }\n\n    updateOpacity(particle, delta);\n  }\n\n}\n\nexports.OpacityUpdater = OpacityUpdater;","map":null,"metadata":{},"sourceType":"script"}