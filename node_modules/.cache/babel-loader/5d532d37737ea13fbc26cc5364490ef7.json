{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Connector = void 0;\n\nconst Utils_1 = require(\"../../../Utils\");\n\nconst Enums_1 = require(\"../../../Enums\");\n\nconst ExternalInteractorBase_1 = require(\"../../../Core/ExternalInteractorBase\");\n\nclass Connector extends ExternalInteractorBase_1.ExternalInteractorBase {\n  constructor(container) {\n    super(container);\n  }\n\n  isEnabled() {\n    const container = this.container,\n          mouse = container.interactivity.mouse,\n          events = container.actualOptions.interactivity.events;\n\n    if (!(events.onHover.enable && mouse.position)) {\n      return false;\n    }\n\n    return Utils_1.isInArray(Enums_1.HoverMode.connect, events.onHover.mode);\n  }\n\n  reset() {}\n\n  interact() {\n    const container = this.container,\n          options = container.actualOptions;\n\n    if (options.interactivity.events.onHover.enable && container.interactivity.status === \"mousemove\") {\n      const mousePos = container.interactivity.mouse.position;\n\n      if (!mousePos) {\n        return;\n      }\n\n      const distance = Math.abs(container.retina.connectModeRadius),\n            query = container.particles.quadTree.queryCircle(mousePos, distance);\n      let i = 0;\n\n      for (const p1 of query) {\n        const pos1 = p1.getPosition();\n\n        for (const p2 of query.slice(i + 1)) {\n          const pos2 = p2.getPosition(),\n                distMax = Math.abs(container.retina.connectModeDistance),\n                xDiff = Math.abs(pos1.x - pos2.x),\n                yDiff = Math.abs(pos1.y - pos2.y);\n\n          if (xDiff < distMax && yDiff < distMax) {\n            container.canvas.drawConnectLine(p1, p2);\n          }\n        }\n\n        ++i;\n      }\n    }\n  }\n\n}\n\nexports.Connector = Connector;","map":null,"metadata":{},"sourceType":"script"}