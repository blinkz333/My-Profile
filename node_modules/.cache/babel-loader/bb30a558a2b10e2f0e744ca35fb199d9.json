{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Circle = void 0;\n\nvar Range_1 = require(\"./Range\");\n\nvar Circle = function (_super) {\n  __extends(Circle, _super);\n\n  function Circle(x, y, radius) {\n    var _this = _super.call(this, x, y) || this;\n\n    _this.radius = radius;\n    return _this;\n  }\n\n  Circle.prototype.contains = function (point) {\n    var d = Math.pow(point.x - this.position.x, 2) + Math.pow(point.y - this.position.y, 2);\n    return d <= this.radius * this.radius;\n  };\n\n  Circle.prototype.intersects = function (range) {\n    var rect = range;\n    var circle = range;\n    var pos1 = this.position;\n    var pos2 = range.position;\n    var xDist = Math.abs(pos2.x - pos1.x);\n    var yDist = Math.abs(pos2.y - pos1.y);\n    var r = this.radius;\n\n    if (circle.radius !== undefined) {\n      var r2 = circle.radius;\n      var rSum = r + r2;\n      var dist = Math.sqrt(xDist * xDist + yDist + yDist);\n      return rSum > dist;\n    } else if (rect.size !== undefined) {\n      var w = rect.size.width;\n      var h = rect.size.height;\n      var edges = Math.pow(xDist - w, 2) + Math.pow(yDist - h, 2);\n\n      if (xDist > r + w || yDist > r + h) {\n        return false;\n      }\n\n      if (xDist <= w || yDist <= h) {\n        return true;\n      }\n\n      return edges <= r * r;\n    }\n\n    return false;\n  };\n\n  return Circle;\n}(Range_1.Range);\n\nexports.Circle = Circle;","map":null,"metadata":{},"sourceType":"script"}