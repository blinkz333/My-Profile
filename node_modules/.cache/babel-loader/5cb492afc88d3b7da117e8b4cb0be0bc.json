{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.loadPolygonMaskPlugin = void 0;\n\nconst PolygonMaskInstance_1 = require(\"./PolygonMaskInstance\");\n\nconst PolygonMask_1 = require(\"./Options/Classes/PolygonMask\");\n\nconst Enums_1 = require(\"./Enums\");\n\nclass Plugin {\n  constructor() {\n    this.id = \"polygonMask\";\n  }\n\n  getPlugin(container) {\n    return new PolygonMaskInstance_1.PolygonMaskInstance(container);\n  }\n\n  needsPlugin(options) {\n    var _a, _b, _c;\n\n    return (_b = (_a = options === null || options === void 0 ? void 0 : options.polygon) === null || _a === void 0 ? void 0 : _a.enable) !== null && _b !== void 0 ? _b : ((_c = options === null || options === void 0 ? void 0 : options.polygon) === null || _c === void 0 ? void 0 : _c.type) !== undefined && options.polygon.type !== Enums_1.Type.none;\n  }\n\n  loadOptions(options, source) {\n    if (!this.needsPlugin(source)) {\n      return;\n    }\n\n    const optionsCast = options;\n    let polygonOptions = optionsCast.polygon;\n\n    if ((polygonOptions === null || polygonOptions === void 0 ? void 0 : polygonOptions.load) === undefined) {\n      optionsCast.polygon = polygonOptions = new PolygonMask_1.PolygonMask();\n    }\n\n    polygonOptions.load(source === null || source === void 0 ? void 0 : source.polygon);\n  }\n\n}\n\nfunction loadPolygonMaskPlugin(tsParticles) {\n  const plugin = new Plugin();\n  tsParticles.addPlugin(plugin);\n}\n\nexports.loadPolygonMaskPlugin = loadPolygonMaskPlugin;","map":null,"metadata":{},"sourceType":"script"}