{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Updater = void 0;\n\nvar Utils_1 = require(\"../../Utils\");\n\nvar Mover_1 = require(\"./Mover\");\n\nvar Enums_1 = require(\"../../Enums\");\n\nvar Updater = function () {\n  function Updater(container, particle) {\n    this.container = container;\n    this.particle = particle;\n    this.mover = new Mover_1.Mover(container, particle);\n  }\n\n  Updater.checkBounds = function (coordinate, radius, size, velocity, outside) {\n    if (coordinate + radius > size && velocity > 0 || coordinate - radius < 0 && velocity < 0) {\n      outside();\n    }\n  };\n\n  Updater.prototype.update = function (delta) {\n    this.mover.move(delta);\n    this.updateOpacity(delta);\n    this.updateSize(delta);\n    this.updateAngle(delta);\n    this.updateColor(delta);\n    this.fixOutOfCanvasPosition(delta);\n    this.updateOutMode(delta);\n  };\n\n  Updater.prototype.updateOpacity = function (delta) {\n    var container = this.container;\n    var options = container.options;\n    var particle = this.particle;\n    var deltaFactor = options.fpsLimit > 0 ? 60 * delta / 1000 : 3.6;\n\n    if (particle.particlesOptions.opacity.animation.enable) {\n      switch (particle.opacity.status) {\n        case Enums_1.OpacityAnimationStatus.increasing:\n          if (particle.opacity.value >= particle.particlesOptions.opacity.value) {\n            particle.opacity.status = Enums_1.OpacityAnimationStatus.decreasing;\n          } else {\n            particle.opacity.value += (particle.opacity.velocity || 0) * deltaFactor;\n          }\n\n          break;\n\n        case Enums_1.OpacityAnimationStatus.decreasing:\n          if (particle.opacity.value <= particle.particlesOptions.opacity.animation.minimumValue) {\n            particle.opacity.status = Enums_1.OpacityAnimationStatus.increasing;\n          } else {\n            particle.opacity.value -= (particle.opacity.velocity || 0) * deltaFactor;\n          }\n\n          break;\n      }\n\n      if (particle.opacity.value < 0) {\n        particle.opacity.value = 0;\n      }\n    }\n  };\n\n  Updater.prototype.updateSize = function (delta) {\n    var _a;\n\n    var container = this.container;\n    var options = container.options;\n    var particle = this.particle;\n    var deltaFactor = options.fpsLimit > 0 ? 60 * delta / 1000 : 3.6;\n\n    if (particle.particlesOptions.size.animation.enable) {\n      switch (particle.size.status) {\n        case Enums_1.SizeAnimationStatus.increasing:\n          if (particle.size.value >= ((_a = particle.sizeValue) !== null && _a !== void 0 ? _a : container.retina.sizeValue)) {\n            particle.size.status = Enums_1.SizeAnimationStatus.decreasing;\n          } else {\n            particle.size.value += (particle.size.velocity || 0) * deltaFactor;\n          }\n\n          break;\n\n        case Enums_1.SizeAnimationStatus.decreasing:\n          if (particle.size.value <= particle.particlesOptions.size.animation.minimumValue) {\n            particle.size.status = Enums_1.SizeAnimationStatus.increasing;\n          } else {\n            particle.size.value -= (particle.size.velocity || 0) * deltaFactor;\n          }\n\n      }\n\n      if (particle.size.value < 0) {\n        particle.size.value = 0;\n      }\n    }\n  };\n\n  Updater.prototype.updateAngle = function (delta) {\n    var container = this.container;\n    var options = container.options;\n    var particle = this.particle;\n    var deltaFactor = options.fpsLimit > 0 ? 60 * delta / 1000 : 3.6;\n\n    if (particle.particlesOptions.rotate.animation.enable) {\n      switch (particle.rotateDirection) {\n        case Enums_1.RotateDirection.clockwise:\n          particle.angle += particle.particlesOptions.rotate.animation.speed * Math.PI / 18 * deltaFactor;\n\n          if (particle.angle > 360) {\n            particle.angle -= 360;\n          }\n\n          break;\n\n        case Enums_1.RotateDirection.counterClockwise:\n        default:\n          particle.angle -= particle.particlesOptions.rotate.animation.speed * Math.PI / 18 * deltaFactor;\n\n          if (particle.angle < 0) {\n            particle.angle += 360;\n          }\n\n          break;\n      }\n    }\n  };\n\n  Updater.prototype.updateColor = function (delta) {\n    var container = this.container;\n    var options = container.options;\n    var particle = this.particle;\n\n    if (particle.color === undefined) {\n      return;\n    }\n\n    var deltaFactor = options.fpsLimit > 0 ? 60 * delta / 1000 : 3.6;\n\n    if (particle.particlesOptions.color.animation.enable) {\n      particle.color.h += (particle.colorVelocity || 0) * deltaFactor;\n\n      if (particle.color.h > 360) {\n        particle.color.h -= 360;\n      }\n    }\n  };\n\n  Updater.prototype.fixOutOfCanvasPosition = function (_delta) {\n    var container = this.container;\n    var particle = this.particle;\n    var outMode = particle.particlesOptions.move.outMode;\n    var wrap = particle.particlesOptions.move.warp;\n    var canvasSize = container.canvas.size;\n    var newPos;\n\n    if (outMode === Enums_1.OutMode.bounce) {\n      newPos = {\n        bottom: canvasSize.height,\n        left: particle.size.value,\n        right: canvasSize.width,\n        top: particle.size.value\n      };\n    } else if (outMode === Enums_1.OutMode.bounceHorizontal) {\n      newPos = {\n        bottom: canvasSize.height + particle.size.value - particle.offset.y,\n        left: particle.size.value,\n        right: canvasSize.width,\n        top: -particle.size.value - particle.offset.y\n      };\n    } else if (outMode === Enums_1.OutMode.bounceVertical) {\n      newPos = {\n        bottom: canvasSize.height,\n        left: -particle.size.value - particle.offset.x,\n        right: canvasSize.width + particle.size.value + particle.offset.x,\n        top: particle.size.value\n      };\n    } else {\n      newPos = {\n        bottom: canvasSize.height + particle.size.value - particle.offset.y,\n        left: -particle.size.value - particle.offset.x,\n        right: canvasSize.width + particle.size.value + particle.offset.x,\n        top: -particle.size.value - particle.offset.y\n      };\n    }\n\n    if (outMode === Enums_1.OutMode.destroy) {\n      var sizeValue = particle.size.value;\n\n      if (!Utils_1.Utils.isPointInside(particle.position, container.canvas.size, sizeValue)) {\n        container.particles.remove(particle);\n      }\n    } else {\n      var sizeValue = particle.size.value;\n      var nextBounds = Utils_1.Utils.calculateBounds(particle.position, sizeValue);\n\n      if (nextBounds.left > canvasSize.width - particle.offset.x) {\n        particle.position.x = newPos.left;\n\n        if (!wrap) {\n          particle.position.y = Math.random() * canvasSize.height;\n        }\n      } else if (nextBounds.right < -particle.offset.x) {\n        particle.position.x = newPos.right;\n\n        if (!wrap) {\n          particle.position.y = Math.random() * canvasSize.height;\n        }\n      }\n\n      if (nextBounds.top > canvasSize.height - particle.offset.y) {\n        if (!wrap) {\n          particle.position.x = Math.random() * canvasSize.width;\n        }\n\n        particle.position.y = newPos.top;\n      } else if (nextBounds.bottom < -particle.offset.y) {\n        if (!wrap) {\n          particle.position.x = Math.random() * canvasSize.width;\n        }\n\n        particle.position.y = newPos.bottom;\n      }\n    }\n  };\n\n  Updater.prototype.updateOutMode = function (delta) {\n    var particle = this.particle;\n\n    switch (particle.particlesOptions.move.outMode) {\n      case Enums_1.OutMode.bounce:\n      case Enums_1.OutMode.bounceVertical:\n      case Enums_1.OutMode.bounceHorizontal:\n        this.updateBounce(delta);\n        break;\n    }\n  };\n\n  Updater.prototype.updateBounce = function (delta) {\n    var container = this.container;\n    var particle = this.particle;\n    var handled = false;\n\n    for (var id in container.plugins) {\n      var plugin = container.plugins[id];\n\n      if (plugin.particleBounce !== undefined) {\n        handled = plugin.particleBounce(particle, delta);\n      }\n\n      if (handled) {\n        break;\n      }\n    }\n\n    if (!handled) {\n      var outMode = particle.particlesOptions.move.outMode;\n      var pos = particle.getPosition();\n\n      if (outMode === Enums_1.OutMode.bounce || outMode === Enums_1.OutMode.bounceHorizontal) {\n        var size = particle.size.value;\n        var velocity = particle.velocity.horizontal;\n        Updater.checkBounds(pos.x, size, container.canvas.size.width, velocity, function () {\n          particle.velocity.horizontal *= -1;\n        });\n      }\n\n      if (outMode === Enums_1.OutMode.bounce || outMode === Enums_1.OutMode.bounceVertical) {\n        var size = particle.size.value;\n        var velocity = particle.velocity.vertical;\n        Updater.checkBounds(pos.y, size, container.canvas.size.height, velocity, function () {\n          particle.velocity.vertical *= -1;\n        });\n      }\n    }\n  };\n\n  return Updater;\n}();\n\nexports.Updater = Updater;","map":null,"metadata":{},"sourceType":"script"}